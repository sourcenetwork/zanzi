// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zanzi/api/relation_graph.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckRequestMultiError, or
// nil if none found.
func (m *CheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetAccessRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckRequestValidationError{
					field:  "AccessRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckRequestValidationError{
					field:  "AccessRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "AccessRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckRequestMultiError(errors)
	}

	return nil
}

// CheckRequestMultiError is an error wrapping multiple validation errors
// returned by CheckRequest.ValidateAll() if the designated constraints aren't met.
type CheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRequestMultiError) AllErrors() []error { return m }

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResponseMultiError, or
// nil if none found.
func (m *CheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckResponseMultiError(errors)
	}

	return nil
}

// CheckResponseMultiError is an error wrapping multiple validation errors
// returned by CheckResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponseMultiError) AllErrors() []error { return m }

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on ExplainCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExplainCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExplainCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExplainCheckRequestMultiError, or nil if none found.
func (m *ExplainCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExplainCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetAccessRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExplainCheckRequestValidationError{
					field:  "AccessRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExplainCheckRequestValidationError{
					field:  "AccessRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExplainCheckRequestValidationError{
				field:  "AccessRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Format

	if len(errors) > 0 {
		return ExplainCheckRequestMultiError(errors)
	}

	return nil
}

// ExplainCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ExplainCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type ExplainCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExplainCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExplainCheckRequestMultiError) AllErrors() []error { return m }

// ExplainCheckRequestValidationError is the validation error returned by
// ExplainCheckRequest.Validate if the designated constraints aren't met.
type ExplainCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExplainCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExplainCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExplainCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExplainCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExplainCheckRequestValidationError) ErrorName() string {
	return "ExplainCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExplainCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExplainCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExplainCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExplainCheckRequestValidationError{}

// Validate checks the field values on ExplainCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExplainCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExplainCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExplainCheckResponseMultiError, or nil if none found.
func (m *ExplainCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExplainCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GoalTree

	// no validation rules for Authorized

	// no validation rules for Format

	if len(errors) > 0 {
		return ExplainCheckResponseMultiError(errors)
	}

	return nil
}

// ExplainCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ExplainCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type ExplainCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExplainCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExplainCheckResponseMultiError) AllErrors() []error { return m }

// ExplainCheckResponseValidationError is the validation error returned by
// ExplainCheckResponse.Validate if the designated constraints aren't met.
type ExplainCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExplainCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExplainCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExplainCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExplainCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExplainCheckResponseValidationError) ErrorName() string {
	return "ExplainCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExplainCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExplainCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExplainCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExplainCheckResponseValidationError{}

// Validate checks the field values on ExpandRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpandRequestMultiError, or
// nil if none found.
func (m *ExpandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetRoot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpandRequestValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpandRequestValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpandRequestValidationError{
				field:  "Root",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Format

	if len(errors) > 0 {
		return ExpandRequestMultiError(errors)
	}

	return nil
}

// ExpandRequestMultiError is an error wrapping multiple validation errors
// returned by ExpandRequest.ValidateAll() if the designated constraints
// aren't met.
type ExpandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandRequestMultiError) AllErrors() []error { return m }

// ExpandRequestValidationError is the validation error returned by
// ExpandRequest.Validate if the designated constraints aren't met.
type ExpandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandRequestValidationError) ErrorName() string { return "ExpandRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExpandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandRequestValidationError{}

// Validate checks the field values on ExpandResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpandResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpandResponseMultiError,
// or nil if none found.
func (m *ExpandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GoalTree

	// no validation rules for Format

	if len(errors) > 0 {
		return ExpandResponseMultiError(errors)
	}

	return nil
}

// ExpandResponseMultiError is an error wrapping multiple validation errors
// returned by ExpandResponse.ValidateAll() if the designated constraints
// aren't met.
type ExpandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandResponseMultiError) AllErrors() []error { return m }

// ExpandResponseValidationError is the validation error returned by
// ExpandResponse.Validate if the designated constraints aren't met.
type ExpandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandResponseValidationError) ErrorName() string { return "ExpandResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExpandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandResponseValidationError{}

// Validate checks the field values on MultiCheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MultiCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiCheckRequestMultiError, or nil if none found.
func (m *MultiCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultiCheckRequestValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultiCheckRequestValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultiCheckRequestValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultiCheckRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultiCheckRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultiCheckRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MultiCheckRequestMultiError(errors)
	}

	return nil
}

// MultiCheckRequestMultiError is an error wrapping multiple validation errors
// returned by MultiCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type MultiCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiCheckRequestMultiError) AllErrors() []error { return m }

// MultiCheckRequestValidationError is the validation error returned by
// MultiCheckRequest.Validate if the designated constraints aren't met.
type MultiCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCheckRequestValidationError) ErrorName() string {
	return "MultiCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCheckRequestValidationError{}

// Validate checks the field values on MultiCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiCheckResponseMultiError, or nil if none found.
func (m *MultiCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiCheckResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiCheckResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCheckResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiCheckResponseMultiError(errors)
	}

	return nil
}

// MultiCheckResponseMultiError is an error wrapping multiple validation errors
// returned by MultiCheckResponse.ValidateAll() if the designated constraints
// aren't met.
type MultiCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiCheckResponseMultiError) AllErrors() []error { return m }

// MultiCheckResponseValidationError is the validation error returned by
// MultiCheckResponse.Validate if the designated constraints aren't met.
type MultiCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCheckResponseValidationError) ErrorName() string {
	return "MultiCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCheckResponseValidationError{}

// Validate checks the field values on DumpRelationshipsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DumpRelationshipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpRelationshipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DumpRelationshipsRequestMultiError, or nil if none found.
func (m *DumpRelationshipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpRelationshipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	// no validation rules for Format

	if len(errors) > 0 {
		return DumpRelationshipsRequestMultiError(errors)
	}

	return nil
}

// DumpRelationshipsRequestMultiError is an error wrapping multiple validation
// errors returned by DumpRelationshipsRequest.ValidateAll() if the designated
// constraints aren't met.
type DumpRelationshipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpRelationshipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpRelationshipsRequestMultiError) AllErrors() []error { return m }

// DumpRelationshipsRequestValidationError is the validation error returned by
// DumpRelationshipsRequest.Validate if the designated constraints aren't met.
type DumpRelationshipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpRelationshipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpRelationshipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpRelationshipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpRelationshipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpRelationshipsRequestValidationError) ErrorName() string {
	return "DumpRelationshipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DumpRelationshipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpRelationshipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpRelationshipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpRelationshipsRequestValidationError{}

// Validate checks the field values on DumpRelationshipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DumpRelationshipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpRelationshipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DumpRelationshipResponseMultiError, or nil if none found.
func (m *DumpRelationshipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpRelationshipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Dump.(type) {
	case *DumpRelationshipResponse_Tree:
		if v == nil {
			err := DumpRelationshipResponseValidationError{
				field:  "Dump",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTree()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DumpRelationshipResponseValidationError{
						field:  "Tree",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DumpRelationshipResponseValidationError{
						field:  "Tree",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTree()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DumpRelationshipResponseValidationError{
					field:  "Tree",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DumpRelationshipResponse_Dot:
		if v == nil {
			err := DumpRelationshipResponseValidationError{
				field:  "Dump",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Dot
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DumpRelationshipResponseMultiError(errors)
	}

	return nil
}

// DumpRelationshipResponseMultiError is an error wrapping multiple validation
// errors returned by DumpRelationshipResponse.ValidateAll() if the designated
// constraints aren't met.
type DumpRelationshipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpRelationshipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpRelationshipResponseMultiError) AllErrors() []error { return m }

// DumpRelationshipResponseValidationError is the validation error returned by
// DumpRelationshipResponse.Validate if the designated constraints aren't met.
type DumpRelationshipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpRelationshipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpRelationshipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpRelationshipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpRelationshipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpRelationshipResponseValidationError) ErrorName() string {
	return "DumpRelationshipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DumpRelationshipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpRelationshipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpRelationshipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpRelationshipResponseValidationError{}

// Validate checks the field values on CheckResponse_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResponse_ResultMultiError, or nil if none found.
func (m *CheckResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorized

	if len(errors) > 0 {
		return CheckResponse_ResultMultiError(errors)
	}

	return nil
}

// CheckResponse_ResultMultiError is an error wrapping multiple validation
// errors returned by CheckResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type CheckResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponse_ResultMultiError) AllErrors() []error { return m }

// CheckResponse_ResultValidationError is the validation error returned by
// CheckResponse_Result.Validate if the designated constraints aren't met.
type CheckResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponse_ResultValidationError) ErrorName() string {
	return "CheckResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponse_ResultValidationError{}

// Validate checks the field values on MultiCheckResponse_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiCheckResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiCheckResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiCheckResponse_ResultMultiError, or nil if none found.
func (m *MultiCheckResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiCheckResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorized

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultiCheckResponse_ResultValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultiCheckResponse_ResultValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultiCheckResponse_ResultValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MultiCheckResponse_ResultMultiError(errors)
	}

	return nil
}

// MultiCheckResponse_ResultMultiError is an error wrapping multiple validation
// errors returned by MultiCheckResponse_Result.ValidateAll() if the
// designated constraints aren't met.
type MultiCheckResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiCheckResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiCheckResponse_ResultMultiError) AllErrors() []error { return m }

// MultiCheckResponse_ResultValidationError is the validation error returned by
// MultiCheckResponse_Result.Validate if the designated constraints aren't met.
type MultiCheckResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCheckResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCheckResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCheckResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCheckResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCheckResponse_ResultValidationError) ErrorName() string {
	return "MultiCheckResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCheckResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCheckResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCheckResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCheckResponse_ResultValidationError{}
