// policy_service.proto defines an RPC service for managing Policies and their Relationships

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: zanzi/api/policy_service.proto

package api

import (
	domain "github.com/sourcenetwork/zanzi/pkg/domain"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdatePolicyRequest_UpdateStrategy int32

const (
	UpdatePolicyRequest_IGNORE_ORPHANS UpdatePolicyRequest_UpdateStrategy = 0
)

// Enum value maps for UpdatePolicyRequest_UpdateStrategy.
var (
	UpdatePolicyRequest_UpdateStrategy_name = map[int32]string{
		0: "IGNORE_ORPHANS",
	}
	UpdatePolicyRequest_UpdateStrategy_value = map[string]int32{
		"IGNORE_ORPHANS": 0,
	}
)

func (x UpdatePolicyRequest_UpdateStrategy) Enum() *UpdatePolicyRequest_UpdateStrategy {
	p := new(UpdatePolicyRequest_UpdateStrategy)
	*p = x
	return p
}

func (x UpdatePolicyRequest_UpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdatePolicyRequest_UpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_zanzi_api_policy_service_proto_enumTypes[0].Descriptor()
}

func (UpdatePolicyRequest_UpdateStrategy) Type() protoreflect.EnumType {
	return &file_zanzi_api_policy_service_proto_enumTypes[0]
}

func (x UpdatePolicyRequest_UpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdatePolicyRequest_UpdateStrategy.Descriptor instead.
func (UpdatePolicyRequest_UpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{2, 0}
}

// PolicyDefinition models a Policy, which can be represented
// as domain.Policy type or as a zanzi.policy_definition.PolicyDefinition yaml representation.
type PolicyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *domain.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Set a YAML serialized Policy definition according to the type definitions
	PolicyYaml string `protobuf:"bytes,2,opt,name=policy_yaml,json=policyYaml,proto3" json:"policy_yaml,omitempty"`
}

func (x *PolicyDefinition) Reset() {
	*x = PolicyDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDefinition) ProtoMessage() {}

func (x *PolicyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDefinition.ProtoReflect.Descriptor instead.
func (*PolicyDefinition) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyDefinition) GetPolicy() *domain.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *PolicyDefinition) GetPolicyYaml() string {
	if x != nil {
		return x.PolicyYaml
	}
	return ""
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyDefinition *PolicyDefinition `protobuf:"bytes,1,opt,name=policy_definition,json=policyDefinition,proto3" json:"policy_definition,omitempty"`
	// app_data is an opaque byte array which applications
	// can send to associate satellite data to a Policy
	AppData []byte `protobuf:"bytes,2,opt,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePolicyRequest) GetPolicyDefinition() *PolicyDefinition {
	if x != nil {
		return x.PolicyDefinition
	}
	return nil
}

func (x *CreatePolicyRequest) GetAppData() []byte {
	if x != nil {
		return x.AppData
	}
	return nil
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyDefinition *PolicyDefinition `protobuf:"bytes,1,opt,name=policy_definition,json=policyDefinition,proto3" json:"policy_definition,omitempty"`
	// app_data is an opaque byte array which applications
	// can send to associate satellite data to a Policy
	AppData  []byte                             `protobuf:"bytes,2,opt,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
	Strategy UpdatePolicyRequest_UpdateStrategy `protobuf:"varint,3,opt,name=strategy,proto3,enum=sourcenetwork.zanzi.api.UpdatePolicyRequest_UpdateStrategy" json:"strategy,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePolicyRequest) GetPolicyDefinition() *PolicyDefinition {
	if x != nil {
		return x.PolicyDefinition
	}
	return nil
}

func (x *UpdatePolicyRequest) GetAppData() []byte {
	if x != nil {
		return x.AppData
	}
	return nil
}

func (x *UpdatePolicyRequest) GetStrategy() UpdatePolicyRequest_UpdateStrategy {
	if x != nil {
		return x.Strategy
	}
	return UpdatePolicyRequest_IGNORE_ORPHANS
}

type CreatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *domain.PolicyRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *CreatePolicyResponse) Reset() {
	*x = CreatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyResponse) ProtoMessage() {}

func (x *CreatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePolicyResponse) GetRecord() *domain.PolicyRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type UpdatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePolicyResponse) Reset() {
	*x = UpdatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyResponse) ProtoMessage() {}

func (x *UpdatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{4}
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of policy to be deleted
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeletePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// found flags whether Policy was found and then removed from store.
	Found                bool   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	RelationshipsRemoved uint64 `protobuf:"varint,2,opt,name=relationships_removed,json=relationshipsRemoved,proto3" json:"relationships_removed,omitempty"`
}

func (x *DeletePolicyResponse) Reset() {
	*x = DeletePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyResponse) ProtoMessage() {}

func (x *DeletePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyResponse.ProtoReflect.Descriptor instead.
func (*DeletePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePolicyResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *DeletePolicyResponse) GetRelationshipsRemoved() uint64 {
	if x != nil {
		return x.RelationshipsRemoved
	}
	return 0
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of policy to be fetched
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *domain.PolicyRecord `protobuf:"bytes,1,opt,name=record,proto3,oneof" json:"record,omitempty"`
}

func (x *GetPolicyResponse) Reset() {
	*x = GetPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyResponse) ProtoMessage() {}

func (x *GetPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetPolicyResponse) GetRecord() *domain.PolicyRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type ListPolicyIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPolicyIdsRequest) Reset() {
	*x = ListPolicyIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyIdsRequest) ProtoMessage() {}

func (x *ListPolicyIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyIdsRequest.ProtoReflect.Descriptor instead.
func (*ListPolicyIdsRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{9}
}

type ListPolicyIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*ListPolicyIdsResponse_Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListPolicyIdsResponse) Reset() {
	*x = ListPolicyIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyIdsResponse) ProtoMessage() {}

func (x *ListPolicyIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyIdsResponse.ProtoReflect.Descriptor instead.
func (*ListPolicyIdsResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListPolicyIdsResponse) GetRecords() []*ListPolicyIdsResponse_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type SetRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy which contains relationship
	PolicyId     string               `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Relationship *domain.Relationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// opaque byte array to be stored with relationship
	AppData []byte `protobuf:"bytes,3,opt,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
}

func (x *SetRelationshipRequest) Reset() {
	*x = SetRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRelationshipRequest) ProtoMessage() {}

func (x *SetRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRelationshipRequest.ProtoReflect.Descriptor instead.
func (*SetRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{11}
}

func (x *SetRelationshipRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *SetRelationshipRequest) GetRelationship() *domain.Relationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *SetRelationshipRequest) GetAppData() []byte {
	if x != nil {
		return x.AppData
	}
	return nil
}

type SetRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag indicates whether record was overwritten.
	// if true record existed, otherwise it was created
	RecordOverwritten bool `protobuf:"varint,1,opt,name=record_overwritten,json=recordOverwritten,proto3" json:"record_overwritten,omitempty"`
}

func (x *SetRelationshipResponse) Reset() {
	*x = SetRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRelationshipResponse) ProtoMessage() {}

func (x *SetRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRelationshipResponse.ProtoReflect.Descriptor instead.
func (*SetRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{12}
}

func (x *SetRelationshipResponse) GetRecordOverwritten() bool {
	if x != nil {
		return x.RecordOverwritten
	}
	return false
}

type DeleteRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId     string               `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Relationship *domain.Relationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (x *DeleteRelationshipRequest) Reset() {
	*x = DeleteRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelationshipRequest) ProtoMessage() {}

func (x *DeleteRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelationshipRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteRelationshipRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *DeleteRelationshipRequest) GetRelationship() *domain.Relationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

type DeleteRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag indicates whether relationship was found then removed
	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
}

func (x *DeleteRelationshipResponse) Reset() {
	*x = DeleteRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelationshipResponse) ProtoMessage() {}

func (x *DeleteRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelationshipResponse.ProtoReflect.Descriptor instead.
func (*DeleteRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRelationshipResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type GetRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId     string               `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Relationship *domain.Relationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (x *GetRelationshipRequest) Reset() {
	*x = GetRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationshipRequest) ProtoMessage() {}

func (x *GetRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationshipRequest.ProtoReflect.Descriptor instead.
func (*GetRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetRelationshipRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *GetRelationshipRequest) GetRelationship() *domain.Relationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

type GetRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *domain.RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3,oneof" json:"record,omitempty"`
}

func (x *GetRelationshipResponse) Reset() {
	*x = GetRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationshipResponse) ProtoMessage() {}

func (x *GetRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationshipResponse.ProtoReflect.Descriptor instead.
func (*GetRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetRelationshipResponse) GetRecord() *domain.RelationshipRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type FindRelationshipRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string                       `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Selector *domain.RelationshipSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *FindRelationshipRecordsRequest) Reset() {
	*x = FindRelationshipRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRelationshipRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRelationshipRecordsRequest) ProtoMessage() {}

func (x *FindRelationshipRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRelationshipRecordsRequest.ProtoReflect.Descriptor instead.
func (*FindRelationshipRecordsRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{17}
}

func (x *FindRelationshipRecordsRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *FindRelationshipRecordsRequest) GetSelector() *domain.RelationshipSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type FindRelationshipRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *RelationshipRecordSet `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FindRelationshipRecordsResponse) Reset() {
	*x = FindRelationshipRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRelationshipRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRelationshipRecordsResponse) ProtoMessage() {}

func (x *FindRelationshipRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRelationshipRecordsResponse.ProtoReflect.Descriptor instead.
func (*FindRelationshipRecordsResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{18}
}

func (x *FindRelationshipRecordsResponse) GetResult() *RelationshipRecordSet {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteRelationshipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string                       `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Selector *domain.RelationshipSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *DeleteRelationshipsRequest) Reset() {
	*x = DeleteRelationshipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelationshipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelationshipsRequest) ProtoMessage() {}

func (x *DeleteRelationshipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelationshipsRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelationshipsRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRelationshipsRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *DeleteRelationshipsRequest) GetSelector() *domain.RelationshipSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type DeleteRelationshipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of records affected by delete call
	RecordsAffected uint64 `protobuf:"varint,1,opt,name=records_affected,json=recordsAffected,proto3" json:"records_affected,omitempty"`
}

func (x *DeleteRelationshipsResponse) Reset() {
	*x = DeleteRelationshipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelationshipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelationshipsResponse) ProtoMessage() {}

func (x *DeleteRelationshipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelationshipsResponse.ProtoReflect.Descriptor instead.
func (*DeleteRelationshipsResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRelationshipsResponse) GetRecordsAffected() uint64 {
	if x != nil {
		return x.RecordsAffected
	}
	return 0
}

type RelationshipRecordSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*domain.RelationshipRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RelationshipRecordSet) Reset() {
	*x = RelationshipRecordSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationshipRecordSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipRecordSet) ProtoMessage() {}

func (x *RelationshipRecordSet) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipRecordSet.ProtoReflect.Descriptor instead.
func (*RelationshipRecordSet) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{21}
}

func (x *RelationshipRecordSet) GetRecords() []*domain.RelationshipRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type ListPolicyIdsResponse_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListPolicyIdsResponse_Record) Reset() {
	*x = ListPolicyIdsResponse_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_policy_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyIdsResponse_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyIdsResponse_Record) ProtoMessage() {}

func (x *ListPolicyIdsResponse_Record) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_policy_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyIdsResponse_Record.ProtoReflect.Descriptor instead.
func (*ListPolicyIdsResponse_Record) Descriptor() ([]byte, []int) {
	return file_zanzi_api_policy_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListPolicyIdsResponse_Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_zanzi_api_policy_service_proto protoreflect.FileDescriptor

var file_zanzi_api_policy_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6f, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x79, 0x61, 0x6d, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x59, 0x61,
	0x6d, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x87, 0x02,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x22, 0x24, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x4f, 0x52,
	0x50, 0x48, 0x41, 0x4e, 0x53, 0x10, 0x00, 0x22, 0x58, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x18, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22,
	0x32, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x1e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a,
	0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x1f, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61,
	0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x48, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xa9, 0x0a, 0x0a,
	0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61,
	0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6b, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x29, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2f, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x7d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x74, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x2f, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x33,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a,
	0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a,
	0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zanzi_api_policy_service_proto_rawDescOnce sync.Once
	file_zanzi_api_policy_service_proto_rawDescData = file_zanzi_api_policy_service_proto_rawDesc
)

func file_zanzi_api_policy_service_proto_rawDescGZIP() []byte {
	file_zanzi_api_policy_service_proto_rawDescOnce.Do(func() {
		file_zanzi_api_policy_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zanzi_api_policy_service_proto_rawDescData)
	})
	return file_zanzi_api_policy_service_proto_rawDescData
}

var file_zanzi_api_policy_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zanzi_api_policy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_zanzi_api_policy_service_proto_goTypes = []interface{}{
	(UpdatePolicyRequest_UpdateStrategy)(0), // 0: sourcenetwork.zanzi.api.UpdatePolicyRequest.UpdateStrategy
	(*PolicyDefinition)(nil),                // 1: sourcenetwork.zanzi.api.PolicyDefinition
	(*CreatePolicyRequest)(nil),             // 2: sourcenetwork.zanzi.api.CreatePolicyRequest
	(*UpdatePolicyRequest)(nil),             // 3: sourcenetwork.zanzi.api.UpdatePolicyRequest
	(*CreatePolicyResponse)(nil),            // 4: sourcenetwork.zanzi.api.CreatePolicyResponse
	(*UpdatePolicyResponse)(nil),            // 5: sourcenetwork.zanzi.api.UpdatePolicyResponse
	(*DeletePolicyRequest)(nil),             // 6: sourcenetwork.zanzi.api.DeletePolicyRequest
	(*DeletePolicyResponse)(nil),            // 7: sourcenetwork.zanzi.api.DeletePolicyResponse
	(*GetPolicyRequest)(nil),                // 8: sourcenetwork.zanzi.api.GetPolicyRequest
	(*GetPolicyResponse)(nil),               // 9: sourcenetwork.zanzi.api.GetPolicyResponse
	(*ListPolicyIdsRequest)(nil),            // 10: sourcenetwork.zanzi.api.ListPolicyIdsRequest
	(*ListPolicyIdsResponse)(nil),           // 11: sourcenetwork.zanzi.api.ListPolicyIdsResponse
	(*SetRelationshipRequest)(nil),          // 12: sourcenetwork.zanzi.api.SetRelationshipRequest
	(*SetRelationshipResponse)(nil),         // 13: sourcenetwork.zanzi.api.SetRelationshipResponse
	(*DeleteRelationshipRequest)(nil),       // 14: sourcenetwork.zanzi.api.DeleteRelationshipRequest
	(*DeleteRelationshipResponse)(nil),      // 15: sourcenetwork.zanzi.api.DeleteRelationshipResponse
	(*GetRelationshipRequest)(nil),          // 16: sourcenetwork.zanzi.api.GetRelationshipRequest
	(*GetRelationshipResponse)(nil),         // 17: sourcenetwork.zanzi.api.GetRelationshipResponse
	(*FindRelationshipRecordsRequest)(nil),  // 18: sourcenetwork.zanzi.api.FindRelationshipRecordsRequest
	(*FindRelationshipRecordsResponse)(nil), // 19: sourcenetwork.zanzi.api.FindRelationshipRecordsResponse
	(*DeleteRelationshipsRequest)(nil),      // 20: sourcenetwork.zanzi.api.DeleteRelationshipsRequest
	(*DeleteRelationshipsResponse)(nil),     // 21: sourcenetwork.zanzi.api.DeleteRelationshipsResponse
	(*RelationshipRecordSet)(nil),           // 22: sourcenetwork.zanzi.api.RelationshipRecordSet
	(*ListPolicyIdsResponse_Record)(nil),    // 23: sourcenetwork.zanzi.api.ListPolicyIdsResponse.Record
	(*domain.Policy)(nil),                   // 24: sourcenetwork.zanzi.domain.Policy
	(*domain.PolicyRecord)(nil),             // 25: sourcenetwork.zanzi.domain.PolicyRecord
	(*domain.Relationship)(nil),             // 26: sourcenetwork.zanzi.domain.Relationship
	(*domain.RelationshipRecord)(nil),       // 27: sourcenetwork.zanzi.domain.RelationshipRecord
	(*domain.RelationshipSelector)(nil),     // 28: sourcenetwork.zanzi.domain.RelationshipSelector
}
var file_zanzi_api_policy_service_proto_depIdxs = []int32{
	24, // 0: sourcenetwork.zanzi.api.PolicyDefinition.policy:type_name -> sourcenetwork.zanzi.domain.Policy
	1,  // 1: sourcenetwork.zanzi.api.CreatePolicyRequest.policy_definition:type_name -> sourcenetwork.zanzi.api.PolicyDefinition
	1,  // 2: sourcenetwork.zanzi.api.UpdatePolicyRequest.policy_definition:type_name -> sourcenetwork.zanzi.api.PolicyDefinition
	0,  // 3: sourcenetwork.zanzi.api.UpdatePolicyRequest.strategy:type_name -> sourcenetwork.zanzi.api.UpdatePolicyRequest.UpdateStrategy
	25, // 4: sourcenetwork.zanzi.api.CreatePolicyResponse.record:type_name -> sourcenetwork.zanzi.domain.PolicyRecord
	25, // 5: sourcenetwork.zanzi.api.GetPolicyResponse.record:type_name -> sourcenetwork.zanzi.domain.PolicyRecord
	23, // 6: sourcenetwork.zanzi.api.ListPolicyIdsResponse.records:type_name -> sourcenetwork.zanzi.api.ListPolicyIdsResponse.Record
	26, // 7: sourcenetwork.zanzi.api.SetRelationshipRequest.relationship:type_name -> sourcenetwork.zanzi.domain.Relationship
	26, // 8: sourcenetwork.zanzi.api.DeleteRelationshipRequest.relationship:type_name -> sourcenetwork.zanzi.domain.Relationship
	26, // 9: sourcenetwork.zanzi.api.GetRelationshipRequest.relationship:type_name -> sourcenetwork.zanzi.domain.Relationship
	27, // 10: sourcenetwork.zanzi.api.GetRelationshipResponse.record:type_name -> sourcenetwork.zanzi.domain.RelationshipRecord
	28, // 11: sourcenetwork.zanzi.api.FindRelationshipRecordsRequest.selector:type_name -> sourcenetwork.zanzi.domain.RelationshipSelector
	22, // 12: sourcenetwork.zanzi.api.FindRelationshipRecordsResponse.result:type_name -> sourcenetwork.zanzi.api.RelationshipRecordSet
	28, // 13: sourcenetwork.zanzi.api.DeleteRelationshipsRequest.selector:type_name -> sourcenetwork.zanzi.domain.RelationshipSelector
	27, // 14: sourcenetwork.zanzi.api.RelationshipRecordSet.records:type_name -> sourcenetwork.zanzi.domain.RelationshipRecord
	2,  // 15: sourcenetwork.zanzi.api.PolicyService.CreatePolicy:input_type -> sourcenetwork.zanzi.api.CreatePolicyRequest
	3,  // 16: sourcenetwork.zanzi.api.PolicyService.UpdatePolicy:input_type -> sourcenetwork.zanzi.api.UpdatePolicyRequest
	6,  // 17: sourcenetwork.zanzi.api.PolicyService.DeletePolicy:input_type -> sourcenetwork.zanzi.api.DeletePolicyRequest
	8,  // 18: sourcenetwork.zanzi.api.PolicyService.GetPolicy:input_type -> sourcenetwork.zanzi.api.GetPolicyRequest
	10, // 19: sourcenetwork.zanzi.api.PolicyService.ListPolicyIds:input_type -> sourcenetwork.zanzi.api.ListPolicyIdsRequest
	12, // 20: sourcenetwork.zanzi.api.PolicyService.SetRelationship:input_type -> sourcenetwork.zanzi.api.SetRelationshipRequest
	14, // 21: sourcenetwork.zanzi.api.PolicyService.DeleteRelationship:input_type -> sourcenetwork.zanzi.api.DeleteRelationshipRequest
	16, // 22: sourcenetwork.zanzi.api.PolicyService.GetRelationship:input_type -> sourcenetwork.zanzi.api.GetRelationshipRequest
	20, // 23: sourcenetwork.zanzi.api.PolicyService.DeleteRelationships:input_type -> sourcenetwork.zanzi.api.DeleteRelationshipsRequest
	18, // 24: sourcenetwork.zanzi.api.PolicyService.FindRelationshipRecords:input_type -> sourcenetwork.zanzi.api.FindRelationshipRecordsRequest
	4,  // 25: sourcenetwork.zanzi.api.PolicyService.CreatePolicy:output_type -> sourcenetwork.zanzi.api.CreatePolicyResponse
	5,  // 26: sourcenetwork.zanzi.api.PolicyService.UpdatePolicy:output_type -> sourcenetwork.zanzi.api.UpdatePolicyResponse
	7,  // 27: sourcenetwork.zanzi.api.PolicyService.DeletePolicy:output_type -> sourcenetwork.zanzi.api.DeletePolicyResponse
	9,  // 28: sourcenetwork.zanzi.api.PolicyService.GetPolicy:output_type -> sourcenetwork.zanzi.api.GetPolicyResponse
	11, // 29: sourcenetwork.zanzi.api.PolicyService.ListPolicyIds:output_type -> sourcenetwork.zanzi.api.ListPolicyIdsResponse
	13, // 30: sourcenetwork.zanzi.api.PolicyService.SetRelationship:output_type -> sourcenetwork.zanzi.api.SetRelationshipResponse
	15, // 31: sourcenetwork.zanzi.api.PolicyService.DeleteRelationship:output_type -> sourcenetwork.zanzi.api.DeleteRelationshipResponse
	17, // 32: sourcenetwork.zanzi.api.PolicyService.GetRelationship:output_type -> sourcenetwork.zanzi.api.GetRelationshipResponse
	21, // 33: sourcenetwork.zanzi.api.PolicyService.DeleteRelationships:output_type -> sourcenetwork.zanzi.api.DeleteRelationshipsResponse
	19, // 34: sourcenetwork.zanzi.api.PolicyService.FindRelationshipRecords:output_type -> sourcenetwork.zanzi.api.FindRelationshipRecordsResponse
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_zanzi_api_policy_service_proto_init() }
func file_zanzi_api_policy_service_proto_init() {
	if File_zanzi_api_policy_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zanzi_api_policy_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRelationshipRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRelationshipRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelationshipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelationshipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationshipRecordSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_policy_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyIdsResponse_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zanzi_api_policy_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_zanzi_api_policy_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zanzi_api_policy_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zanzi_api_policy_service_proto_goTypes,
		DependencyIndexes: file_zanzi_api_policy_service_proto_depIdxs,
		EnumInfos:         file_zanzi_api_policy_service_proto_enumTypes,
		MessageInfos:      file_zanzi_api_policy_service_proto_msgTypes,
	}.Build()
	File_zanzi_api_policy_service_proto = out.File
	file_zanzi_api_policy_service_proto_rawDesc = nil
	file_zanzi_api_policy_service_proto_goTypes = nil
	file_zanzi_api_policy_service_proto_depIdxs = nil
}
