// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zanzi/api/policy_service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolicyDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyDefinitionMultiError, or nil if none found.
func (m *PolicyDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Definition.(type) {
	case *PolicyDefinition_Policy:
		if v == nil {
			err := PolicyDefinitionValidationError{
				field:  "Definition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyDefinitionValidationError{
						field:  "Policy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyDefinitionValidationError{
						field:  "Policy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyDefinitionValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PolicyDefinition_PolicyYaml:
		if v == nil {
			err := PolicyDefinitionValidationError{
				field:  "Definition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PolicyYaml
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PolicyDefinitionMultiError(errors)
	}

	return nil
}

// PolicyDefinitionMultiError is an error wrapping multiple validation errors
// returned by PolicyDefinition.ValidateAll() if the designated constraints
// aren't met.
type PolicyDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyDefinitionMultiError) AllErrors() []error { return m }

// PolicyDefinitionValidationError is the validation error returned by
// PolicyDefinition.Validate if the designated constraints aren't met.
type PolicyDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyDefinitionValidationError) ErrorName() string { return "PolicyDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e PolicyDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyDefinitionValidationError{}

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyRequestMultiError, or nil if none found.
func (m *CreatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicyDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyRequestValidationError{
					field:  "PolicyDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyRequestValidationError{
					field:  "PolicyDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyRequestValidationError{
				field:  "PolicyDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppData

	if len(errors) > 0 {
		return CreatePolicyRequestMultiError(errors)
	}

	return nil
}

// CreatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyRequestMultiError) AllErrors() []error { return m }

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

// Validate checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyRequestMultiError, or nil if none found.
func (m *UpdatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicyDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePolicyRequestValidationError{
					field:  "PolicyDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePolicyRequestValidationError{
					field:  "PolicyDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePolicyRequestValidationError{
				field:  "PolicyDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppData

	// no validation rules for Strategy

	if len(errors) > 0 {
		return UpdatePolicyRequestMultiError(errors)
	}

	return nil
}

// UpdatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyRequestMultiError) AllErrors() []error { return m }

// UpdatePolicyRequestValidationError is the validation error returned by
// UpdatePolicyRequest.Validate if the designated constraints aren't met.
type UpdatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyRequestValidationError) ErrorName() string {
	return "UpdatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyRequestValidationError{}

// Validate checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyResponseMultiError, or nil if none found.
func (m *CreatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyResponseValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyResponseMultiError(errors)
	}

	return nil
}

// CreatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyResponseMultiError) AllErrors() []error { return m }

// CreatePolicyResponseValidationError is the validation error returned by
// CreatePolicyResponse.Validate if the designated constraints aren't met.
type CreatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyResponseValidationError) ErrorName() string {
	return "CreatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyResponseValidationError{}

// Validate checks the field values on UpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyResponseMultiError, or nil if none found.
func (m *UpdatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePolicyResponseMultiError(errors)
	}

	return nil
}

// UpdatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyResponseMultiError) AllErrors() []error { return m }

// UpdatePolicyResponseValidationError is the validation error returned by
// UpdatePolicyResponse.Validate if the designated constraints aren't met.
type UpdatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyResponseValidationError) ErrorName() string {
	return "UpdatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyResponseValidationError{}

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyRequestMultiError, or nil if none found.
func (m *DeletePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePolicyRequestMultiError(errors)
	}

	return nil
}

// DeletePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyRequestMultiError) AllErrors() []error { return m }

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

// Validate checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyResponseMultiError, or nil if none found.
func (m *DeletePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Found

	// no validation rules for RelationshipsRemoved

	if len(errors) > 0 {
		return DeletePolicyResponseMultiError(errors)
	}

	return nil
}

// DeletePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyResponseMultiError) AllErrors() []error { return m }

// DeletePolicyResponseValidationError is the validation error returned by
// DeletePolicyResponse.Validate if the designated constraints aren't met.
type DeletePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyResponseValidationError) ErrorName() string {
	return "DeletePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyResponseValidationError{}

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyRequestMultiError, or nil if none found.
func (m *GetPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPolicyRequestMultiError(errors)
	}

	return nil
}

// GetPolicyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPolicyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyRequestMultiError) AllErrors() []error { return m }

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

// Validate checks the field values on GetPolicyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyResponseMultiError, or nil if none found.
func (m *GetPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Record != nil {

		if all {
			switch v := interface{}(m.GetRecord()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPolicyResponseValidationError{
						field:  "Record",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPolicyResponseValidationError{
						field:  "Record",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPolicyResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPolicyResponseMultiError(errors)
	}

	return nil
}

// GetPolicyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPolicyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyResponseMultiError) AllErrors() []error { return m }

// GetPolicyResponseValidationError is the validation error returned by
// GetPolicyResponse.Validate if the designated constraints aren't met.
type GetPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyResponseValidationError) ErrorName() string {
	return "GetPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyResponseValidationError{}

// Validate checks the field values on ListPolicyIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPolicyIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPolicyIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPolicyIdsRequestMultiError, or nil if none found.
func (m *ListPolicyIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPolicyIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPolicyIdsRequestMultiError(errors)
	}

	return nil
}

// ListPolicyIdsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPolicyIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPolicyIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPolicyIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPolicyIdsRequestMultiError) AllErrors() []error { return m }

// ListPolicyIdsRequestValidationError is the validation error returned by
// ListPolicyIdsRequest.Validate if the designated constraints aren't met.
type ListPolicyIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPolicyIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPolicyIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPolicyIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPolicyIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPolicyIdsRequestValidationError) ErrorName() string {
	return "ListPolicyIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPolicyIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPolicyIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPolicyIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPolicyIdsRequestValidationError{}

// Validate checks the field values on ListPolicyIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPolicyIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPolicyIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPolicyIdsResponseMultiError, or nil if none found.
func (m *ListPolicyIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPolicyIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPolicyIdsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPolicyIdsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPolicyIdsResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPolicyIdsResponseMultiError(errors)
	}

	return nil
}

// ListPolicyIdsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPolicyIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPolicyIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPolicyIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPolicyIdsResponseMultiError) AllErrors() []error { return m }

// ListPolicyIdsResponseValidationError is the validation error returned by
// ListPolicyIdsResponse.Validate if the designated constraints aren't met.
type ListPolicyIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPolicyIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPolicyIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPolicyIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPolicyIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPolicyIdsResponseValidationError) ErrorName() string {
	return "ListPolicyIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPolicyIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPolicyIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPolicyIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPolicyIdsResponseValidationError{}

// Validate checks the field values on SetRelationshipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRelationshipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRelationshipRequestMultiError, or nil if none found.
func (m *SetRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetRelationshipRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetRelationshipRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetRelationshipRequestValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppData

	if len(errors) > 0 {
		return SetRelationshipRequestMultiError(errors)
	}

	return nil
}

// SetRelationshipRequestMultiError is an error wrapping multiple validation
// errors returned by SetRelationshipRequest.ValidateAll() if the designated
// constraints aren't met.
type SetRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRelationshipRequestMultiError) AllErrors() []error { return m }

// SetRelationshipRequestValidationError is the validation error returned by
// SetRelationshipRequest.Validate if the designated constraints aren't met.
type SetRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRelationshipRequestValidationError) ErrorName() string {
	return "SetRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRelationshipRequestValidationError{}

// Validate checks the field values on SetRelationshipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetRelationshipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRelationshipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRelationshipResponseMultiError, or nil if none found.
func (m *SetRelationshipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRelationshipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordOverwritten

	if len(errors) > 0 {
		return SetRelationshipResponseMultiError(errors)
	}

	return nil
}

// SetRelationshipResponseMultiError is an error wrapping multiple validation
// errors returned by SetRelationshipResponse.ValidateAll() if the designated
// constraints aren't met.
type SetRelationshipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRelationshipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRelationshipResponseMultiError) AllErrors() []error { return m }

// SetRelationshipResponseValidationError is the validation error returned by
// SetRelationshipResponse.Validate if the designated constraints aren't met.
type SetRelationshipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRelationshipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRelationshipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRelationshipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRelationshipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRelationshipResponseValidationError) ErrorName() string {
	return "SetRelationshipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetRelationshipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRelationshipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRelationshipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRelationshipResponseValidationError{}

// Validate checks the field values on DeleteRelationshipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationshipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationshipRequestMultiError, or nil if none found.
func (m *DeleteRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRelationshipRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRelationshipRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRelationshipRequestValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRelationshipRequestMultiError(errors)
	}

	return nil
}

// DeleteRelationshipRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRelationshipRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationshipRequestMultiError) AllErrors() []error { return m }

// DeleteRelationshipRequestValidationError is the validation error returned by
// DeleteRelationshipRequest.Validate if the designated constraints aren't met.
type DeleteRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationshipRequestValidationError) ErrorName() string {
	return "DeleteRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationshipRequestValidationError{}

// Validate checks the field values on DeleteRelationshipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationshipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationshipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationshipResponseMultiError, or nil if none found.
func (m *DeleteRelationshipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationshipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Found

	if len(errors) > 0 {
		return DeleteRelationshipResponseMultiError(errors)
	}

	return nil
}

// DeleteRelationshipResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteRelationshipResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteRelationshipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationshipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationshipResponseMultiError) AllErrors() []error { return m }

// DeleteRelationshipResponseValidationError is the validation error returned
// by DeleteRelationshipResponse.Validate if the designated constraints aren't met.
type DeleteRelationshipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationshipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationshipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationshipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationshipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationshipResponseValidationError) ErrorName() string {
	return "DeleteRelationshipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationshipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationshipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationshipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationshipResponseValidationError{}

// Validate checks the field values on GetRelationshipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationshipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationshipRequestMultiError, or nil if none found.
func (m *GetRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRelationshipRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRelationshipRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRelationshipRequestValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRelationshipRequestMultiError(errors)
	}

	return nil
}

// GetRelationshipRequestMultiError is an error wrapping multiple validation
// errors returned by GetRelationshipRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationshipRequestMultiError) AllErrors() []error { return m }

// GetRelationshipRequestValidationError is the validation error returned by
// GetRelationshipRequest.Validate if the designated constraints aren't met.
type GetRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationshipRequestValidationError) ErrorName() string {
	return "GetRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationshipRequestValidationError{}

// Validate checks the field values on GetRelationshipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationshipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationshipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationshipResponseMultiError, or nil if none found.
func (m *GetRelationshipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationshipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Record != nil {

		if all {
			switch v := interface{}(m.GetRecord()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRelationshipResponseValidationError{
						field:  "Record",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRelationshipResponseValidationError{
						field:  "Record",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRelationshipResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRelationshipResponseMultiError(errors)
	}

	return nil
}

// GetRelationshipResponseMultiError is an error wrapping multiple validation
// errors returned by GetRelationshipResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRelationshipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationshipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationshipResponseMultiError) AllErrors() []error { return m }

// GetRelationshipResponseValidationError is the validation error returned by
// GetRelationshipResponse.Validate if the designated constraints aren't met.
type GetRelationshipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationshipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationshipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationshipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationshipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationshipResponseValidationError) ErrorName() string {
	return "GetRelationshipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationshipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationshipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationshipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationshipResponseValidationError{}

// Validate checks the field values on FindRelationshipRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindRelationshipRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRelationshipRecordsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindRelationshipRecordsRequestMultiError, or nil if none found.
func (m *FindRelationshipRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRelationshipRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRelationshipRecordsRequestValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRelationshipRecordsRequestValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRelationshipRecordsRequestValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRelationshipRecordsRequestMultiError(errors)
	}

	return nil
}

// FindRelationshipRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by FindRelationshipRecordsRequest.ValidateAll()
// if the designated constraints aren't met.
type FindRelationshipRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRelationshipRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRelationshipRecordsRequestMultiError) AllErrors() []error { return m }

// FindRelationshipRecordsRequestValidationError is the validation error
// returned by FindRelationshipRecordsRequest.Validate if the designated
// constraints aren't met.
type FindRelationshipRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRelationshipRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRelationshipRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRelationshipRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRelationshipRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRelationshipRecordsRequestValidationError) ErrorName() string {
	return "FindRelationshipRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindRelationshipRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRelationshipRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRelationshipRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRelationshipRecordsRequestValidationError{}

// Validate checks the field values on FindRelationshipRecordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindRelationshipRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRelationshipRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindRelationshipRecordsResponseMultiError, or nil if none found.
func (m *FindRelationshipRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRelationshipRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRelationshipRecordsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRelationshipRecordsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRelationshipRecordsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRelationshipRecordsResponseMultiError(errors)
	}

	return nil
}

// FindRelationshipRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by FindRelationshipRecordsResponse.ValidateAll()
// if the designated constraints aren't met.
type FindRelationshipRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRelationshipRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRelationshipRecordsResponseMultiError) AllErrors() []error { return m }

// FindRelationshipRecordsResponseValidationError is the validation error
// returned by FindRelationshipRecordsResponse.Validate if the designated
// constraints aren't met.
type FindRelationshipRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRelationshipRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRelationshipRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRelationshipRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRelationshipRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRelationshipRecordsResponseValidationError) ErrorName() string {
	return "FindRelationshipRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindRelationshipRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRelationshipRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRelationshipRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRelationshipRecordsResponseValidationError{}

// Validate checks the field values on DeleteRelationshipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationshipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationshipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationshipsRequestMultiError, or nil if none found.
func (m *DeleteRelationshipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationshipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRelationshipsRequestValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRelationshipsRequestValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRelationshipsRequestValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRelationshipsRequestMultiError(errors)
	}

	return nil
}

// DeleteRelationshipsRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteRelationshipsRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteRelationshipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationshipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationshipsRequestMultiError) AllErrors() []error { return m }

// DeleteRelationshipsRequestValidationError is the validation error returned
// by DeleteRelationshipsRequest.Validate if the designated constraints aren't met.
type DeleteRelationshipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationshipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationshipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationshipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationshipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationshipsRequestValidationError) ErrorName() string {
	return "DeleteRelationshipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationshipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationshipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationshipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationshipsRequestValidationError{}

// Validate checks the field values on DeleteRelationshipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationshipsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationshipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationshipsResponseMultiError, or nil if none found.
func (m *DeleteRelationshipsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationshipsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordsAffected

	if len(errors) > 0 {
		return DeleteRelationshipsResponseMultiError(errors)
	}

	return nil
}

// DeleteRelationshipsResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteRelationshipsResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteRelationshipsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationshipsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationshipsResponseMultiError) AllErrors() []error { return m }

// DeleteRelationshipsResponseValidationError is the validation error returned
// by DeleteRelationshipsResponse.Validate if the designated constraints
// aren't met.
type DeleteRelationshipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationshipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationshipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationshipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationshipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationshipsResponseValidationError) ErrorName() string {
	return "DeleteRelationshipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationshipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationshipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationshipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationshipsResponseValidationError{}

// Validate checks the field values on RelationshipRecordSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationshipRecordSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipRecordSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipRecordSetMultiError, or nil if none found.
func (m *RelationshipRecordSet) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipRecordSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationshipRecordSetValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationshipRecordSetValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationshipRecordSetValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelationshipRecordSetMultiError(errors)
	}

	return nil
}

// RelationshipRecordSetMultiError is an error wrapping multiple validation
// errors returned by RelationshipRecordSet.ValidateAll() if the designated
// constraints aren't met.
type RelationshipRecordSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipRecordSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipRecordSetMultiError) AllErrors() []error { return m }

// RelationshipRecordSetValidationError is the validation error returned by
// RelationshipRecordSet.Validate if the designated constraints aren't met.
type RelationshipRecordSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipRecordSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipRecordSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipRecordSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipRecordSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipRecordSetValidationError) ErrorName() string {
	return "RelationshipRecordSetValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipRecordSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipRecordSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipRecordSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipRecordSetValidationError{}

// Validate checks the field values on ListPolicyIdsResponse_Record with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPolicyIdsResponse_Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPolicyIdsResponse_Record with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPolicyIdsResponse_RecordMultiError, or nil if none found.
func (m *ListPolicyIdsResponse_Record) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPolicyIdsResponse_Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListPolicyIdsResponse_RecordMultiError(errors)
	}

	return nil
}

// ListPolicyIdsResponse_RecordMultiError is an error wrapping multiple
// validation errors returned by ListPolicyIdsResponse_Record.ValidateAll() if
// the designated constraints aren't met.
type ListPolicyIdsResponse_RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPolicyIdsResponse_RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPolicyIdsResponse_RecordMultiError) AllErrors() []error { return m }

// ListPolicyIdsResponse_RecordValidationError is the validation error returned
// by ListPolicyIdsResponse_Record.Validate if the designated constraints
// aren't met.
type ListPolicyIdsResponse_RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPolicyIdsResponse_RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPolicyIdsResponse_RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPolicyIdsResponse_RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPolicyIdsResponse_RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPolicyIdsResponse_RecordValidationError) ErrorName() string {
	return "ListPolicyIdsResponse_RecordValidationError"
}

// Error satisfies the builtin error interface
func (e ListPolicyIdsResponse_RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPolicyIdsResponse_Record.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPolicyIdsResponse_RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPolicyIdsResponse_RecordValidationError{}
