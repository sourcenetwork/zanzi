// Code generated by protoc-gen-cobra. DO NOT EDIT.

package api

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	domain "github.com/sourcenetwork/zanzi/pkg/domain"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func PolicyServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("PolicyService"),
		Short: "PolicyService service client",
		Long:  "PolicyService exposes operations to manage Policies and their Relationships",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_PolicyServiceCreatePolicyCommand(cfg),
		_PolicyServiceUpdatePolicyCommand(cfg),
		_PolicyServiceDeletePolicyCommand(cfg),
		_PolicyServiceGetPolicyCommand(cfg),
		_PolicyServiceListPolicyIdsCommand(cfg),
		_PolicyServiceSetRelationshipCommand(cfg),
		_PolicyServiceDeleteRelationshipCommand(cfg),
		_PolicyServiceGetRelationshipCommand(cfg),
		_PolicyServiceDeleteRelationshipsCommand(cfg),
		_PolicyServiceFindRelationshipRecordsCommand(cfg),
	)
	return cmd
}

func _PolicyServiceCreatePolicyCommand(cfg *client.Config) *cobra.Command {
	req := &CreatePolicyRequest{
		PolicyDefinition: &PolicyDefinition{},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreatePolicy"),
		Short: "CreatePolicy RPC client",
		Long:  "CreatePolicy creates a new Policy.\n Supplying a Policy whose ID already exists in the store is an error.",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "CreatePolicy"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &CreatePolicyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreatePolicy(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	PolicyDefinitionPolicy := &domain.Policy{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("PolicyDefinition Policy"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicy.Id, cfg.FlagNamer("PolicyDefinition Policy Id"), "", "Identifies a Policy - with a used defined identifier - accross the system.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Id"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicy.Name, cfg.FlagNamer("PolicyDefinition Policy Name"), "", "Display name for a Policy")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Name"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicy.Description, cfg.FlagNamer("PolicyDefinition Policy Description"), "", "Describes context and any additional information of interest for Policy users.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Description"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	flag.SliceVar(cmd.PersistentFlags(), flag.ParseMessageE[*domain.Resource], &PolicyDefinitionPolicy.Resources, cfg.FlagNamer("PolicyDefinition Policy Resources"), "set of Resources defined by a Policy")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Resources"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringToStringVar(&PolicyDefinitionPolicy.Attributes, cfg.FlagNamer("PolicyDefinition Policy Attributes"), nil, "key-value string attributes supplied by the user")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Attributes"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	PolicyDefinitionPolicyYaml := &PolicyDefinition_PolicyYaml{}
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicyYaml.PolicyYaml, cfg.FlagNamer("PolicyDefinition PolicyYaml"), "", "Set a YAML serialized Policy definition according to the type definitions")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition PolicyYaml"), func() { req.PolicyDefinition.Definition = PolicyDefinitionPolicyYaml })
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.AppData, cfg.FlagNamer("AppData"), "app_data is an opaque byte array which applications\n can send to associate satellite data to a Policy")

	return cmd
}

func _PolicyServiceUpdatePolicyCommand(cfg *client.Config) *cobra.Command {
	req := &UpdatePolicyRequest{
		PolicyDefinition: &PolicyDefinition{},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UpdatePolicy"),
		Short: "UpdatePolicy RPC client",
		Long:  "UpdatePolicy updates the fields and relations for a Policy.",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "UpdatePolicy"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &UpdatePolicyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.UpdatePolicy(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	PolicyDefinitionPolicy := &domain.Policy{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("PolicyDefinition Policy"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicy.Id, cfg.FlagNamer("PolicyDefinition Policy Id"), "", "Identifies a Policy - with a used defined identifier - accross the system.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Id"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicy.Name, cfg.FlagNamer("PolicyDefinition Policy Name"), "", "Display name for a Policy")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Name"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicy.Description, cfg.FlagNamer("PolicyDefinition Policy Description"), "", "Describes context and any additional information of interest for Policy users.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Description"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	flag.SliceVar(cmd.PersistentFlags(), flag.ParseMessageE[*domain.Resource], &PolicyDefinitionPolicy.Resources, cfg.FlagNamer("PolicyDefinition Policy Resources"), "set of Resources defined by a Policy")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Resources"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	cmd.PersistentFlags().StringToStringVar(&PolicyDefinitionPolicy.Attributes, cfg.FlagNamer("PolicyDefinition Policy Attributes"), nil, "key-value string attributes supplied by the user")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition Policy Attributes"), func() { req.PolicyDefinition.Definition = &PolicyDefinition_Policy{Policy: PolicyDefinitionPolicy} })
	PolicyDefinitionPolicyYaml := &PolicyDefinition_PolicyYaml{}
	cmd.PersistentFlags().StringVar(&PolicyDefinitionPolicyYaml.PolicyYaml, cfg.FlagNamer("PolicyDefinition PolicyYaml"), "", "Set a YAML serialized Policy definition according to the type definitions")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("PolicyDefinition PolicyYaml"), func() { req.PolicyDefinition.Definition = PolicyDefinitionPolicyYaml })
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.AppData, cfg.FlagNamer("AppData"), "app_data is an opaque byte array which applications\n can send to associate satellite data to a Policy")
	flag.EnumVar(cmd.PersistentFlags(), &req.Strategy, cfg.FlagNamer("Strategy"), "")

	return cmd
}

func _PolicyServiceDeletePolicyCommand(cfg *client.Config) *cobra.Command {
	req := &DeletePolicyRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeletePolicy"),
		Short: "DeletePolicy RPC client",
		Long:  "Delete removes the Policy with the given Id from the store",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "DeletePolicy"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &DeletePolicyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeletePolicy(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "id of policy to be deleted")

	return cmd
}

func _PolicyServiceGetPolicyCommand(cfg *client.Config) *cobra.Command {
	req := &GetPolicyRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetPolicy"),
		Short: "GetPolicy RPC client",
		Long:  "Get fetches a policy from the Policy store, if it exists",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "GetPolicy"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &GetPolicyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetPolicy(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "id of policy to be fetched")

	return cmd
}

func _PolicyServiceListPolicyIdsCommand(cfg *client.Config) *cobra.Command {
	req := &ListPolicyIdsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListPolicyIds"),
		Short: "ListPolicyIds RPC client",
		Long:  "List returns all Policies in the Policy store",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "ListPolicyIds"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &ListPolicyIdsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListPolicyIds(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	return cmd
}

func _PolicyServiceSetRelationshipCommand(cfg *client.Config) *cobra.Command {
	req := &SetRelationshipRequest{
		Relationship: &domain.Relationship{
			Object:  &domain.Entity{},
			Subject: &domain.Subject{},
		},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("SetRelationship"),
		Short: "SetRelationship RPC client",
		Long:  "Set adds a Relationship in a Policy",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "SetRelationship"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &SetRelationshipRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.SetRelationship(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.PolicyId, cfg.FlagNamer("PolicyId"), "", "policy which contains relationship")
	cmd.PersistentFlags().StringVar(&req.Relationship.Object.Resource, cfg.FlagNamer("Relationship Object Resource"), "", "resource represents the resource name which will contain the entity")
	cmd.PersistentFlags().StringVar(&req.Relationship.Object.Id, cfg.FlagNamer("Relationship Object Id"), "", "id is an unique identifier for the entity within a resource")
	cmd.PersistentFlags().StringVar(&req.Relationship.Relation, cfg.FlagNamer("Relationship Relation"), "", "relation represents the relation of the relationship")
	RelationshipSubjectEntity := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject Entity"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntity.Resource, cfg.FlagNamer("Relationship Subject Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity Resource"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntity.Id, cfg.FlagNamer("Relationship Subject Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity Id"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	RelationshipSubjectEntitySet := &domain.EntitySet{
		Entity: &domain.Entity{},
	}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject EntitySet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Entity.Resource, cfg.FlagNamer("Relationship Subject EntitySet Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Entity Resource"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Entity.Id, cfg.FlagNamer("Relationship Subject EntitySet Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Entity Id"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Relation, cfg.FlagNamer("Relationship Subject EntitySet Relation"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Relation"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	RelationshipSubjectResourceSet := &domain.ResourceSet{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject ResourceSet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject ResourceSet"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_ResourceSet{ResourceSet: RelationshipSubjectResourceSet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectResourceSet.ResourceName, cfg.FlagNamer("Relationship Subject ResourceSet ResourceName"), "", "resource_name is the name of the resource whose entities should be granted a relation")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject ResourceSet ResourceName"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_ResourceSet{ResourceSet: RelationshipSubjectResourceSet}
	})
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.AppData, cfg.FlagNamer("AppData"), "opaque byte array to be stored with relationship")

	return cmd
}

func _PolicyServiceDeleteRelationshipCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteRelationshipRequest{
		Relationship: &domain.Relationship{
			Object:  &domain.Entity{},
			Subject: &domain.Subject{},
		},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteRelationship"),
		Short: "DeleteRelationship RPC client",
		Long:  "Remove a Relationship from a Policy",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "DeleteRelationship"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &DeleteRelationshipRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteRelationship(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.PolicyId, cfg.FlagNamer("PolicyId"), "", "")
	cmd.PersistentFlags().StringVar(&req.Relationship.Object.Resource, cfg.FlagNamer("Relationship Object Resource"), "", "resource represents the resource name which will contain the entity")
	cmd.PersistentFlags().StringVar(&req.Relationship.Object.Id, cfg.FlagNamer("Relationship Object Id"), "", "id is an unique identifier for the entity within a resource")
	cmd.PersistentFlags().StringVar(&req.Relationship.Relation, cfg.FlagNamer("Relationship Relation"), "", "relation represents the relation of the relationship")
	RelationshipSubjectEntity := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject Entity"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntity.Resource, cfg.FlagNamer("Relationship Subject Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity Resource"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntity.Id, cfg.FlagNamer("Relationship Subject Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity Id"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	RelationshipSubjectEntitySet := &domain.EntitySet{
		Entity: &domain.Entity{},
	}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject EntitySet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Entity.Resource, cfg.FlagNamer("Relationship Subject EntitySet Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Entity Resource"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Entity.Id, cfg.FlagNamer("Relationship Subject EntitySet Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Entity Id"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Relation, cfg.FlagNamer("Relationship Subject EntitySet Relation"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Relation"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	RelationshipSubjectResourceSet := &domain.ResourceSet{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject ResourceSet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject ResourceSet"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_ResourceSet{ResourceSet: RelationshipSubjectResourceSet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectResourceSet.ResourceName, cfg.FlagNamer("Relationship Subject ResourceSet ResourceName"), "", "resource_name is the name of the resource whose entities should be granted a relation")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject ResourceSet ResourceName"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_ResourceSet{ResourceSet: RelationshipSubjectResourceSet}
	})

	return cmd
}

func _PolicyServiceGetRelationshipCommand(cfg *client.Config) *cobra.Command {
	req := &GetRelationshipRequest{
		Relationship: &domain.Relationship{
			Object:  &domain.Entity{},
			Subject: &domain.Subject{},
		},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetRelationship"),
		Short: "GetRelationship RPC client",
		Long:  "Get fetches a Relationship contained in a Policy, if it exists",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "GetRelationship"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &GetRelationshipRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetRelationship(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.PolicyId, cfg.FlagNamer("PolicyId"), "", "")
	cmd.PersistentFlags().StringVar(&req.Relationship.Object.Resource, cfg.FlagNamer("Relationship Object Resource"), "", "resource represents the resource name which will contain the entity")
	cmd.PersistentFlags().StringVar(&req.Relationship.Object.Id, cfg.FlagNamer("Relationship Object Id"), "", "id is an unique identifier for the entity within a resource")
	cmd.PersistentFlags().StringVar(&req.Relationship.Relation, cfg.FlagNamer("Relationship Relation"), "", "relation represents the relation of the relationship")
	RelationshipSubjectEntity := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject Entity"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntity.Resource, cfg.FlagNamer("Relationship Subject Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity Resource"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntity.Id, cfg.FlagNamer("Relationship Subject Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject Entity Id"), func() { req.Relationship.Subject.Subject = &domain.Subject_Entity{Entity: RelationshipSubjectEntity} })
	RelationshipSubjectEntitySet := &domain.EntitySet{
		Entity: &domain.Entity{},
	}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject EntitySet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Entity.Resource, cfg.FlagNamer("Relationship Subject EntitySet Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Entity Resource"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Entity.Id, cfg.FlagNamer("Relationship Subject EntitySet Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Entity Id"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectEntitySet.Relation, cfg.FlagNamer("Relationship Subject EntitySet Relation"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject EntitySet Relation"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_EntitySet{EntitySet: RelationshipSubjectEntitySet}
	})
	RelationshipSubjectResourceSet := &domain.ResourceSet{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Relationship Subject ResourceSet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject ResourceSet"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_ResourceSet{ResourceSet: RelationshipSubjectResourceSet}
	})
	cmd.PersistentFlags().StringVar(&RelationshipSubjectResourceSet.ResourceName, cfg.FlagNamer("Relationship Subject ResourceSet ResourceName"), "", "resource_name is the name of the resource whose entities should be granted a relation")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Relationship Subject ResourceSet ResourceName"), func() {
		req.Relationship.Subject.Subject = &domain.Subject_ResourceSet{ResourceSet: RelationshipSubjectResourceSet}
	})

	return cmd
}

func _PolicyServiceDeleteRelationshipsCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteRelationshipsRequest{
		Selector: &domain.RelationshipSelector{
			ObjectSelector:   &domain.ObjectSelector{},
			RelationSelector: &domain.RelationSelector{},
			SubjectSelector:  &domain.SubjectSelector{},
		},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteRelationships"),
		Short: "DeleteRelationships RPC client",
		Long:  "DeleteRelationships removes all relationships which matches a SelectorSet",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "DeleteRelationships"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &DeleteRelationshipsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteRelationships(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.PolicyId, cfg.FlagNamer("PolicyId"), "", "")
	SelectorObjectSelectorObjectSpec := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector ObjectSelector ObjectSpec"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ObjectSpec"), func() {
		req.Selector.ObjectSelector.Selector = &domain.ObjectSelector_ObjectSpec{ObjectSpec: SelectorObjectSelectorObjectSpec}
	})
	cmd.PersistentFlags().StringVar(&SelectorObjectSelectorObjectSpec.Resource, cfg.FlagNamer("Selector ObjectSelector ObjectSpec Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ObjectSpec Resource"), func() {
		req.Selector.ObjectSelector.Selector = &domain.ObjectSelector_ObjectSpec{ObjectSpec: SelectorObjectSelectorObjectSpec}
	})
	cmd.PersistentFlags().StringVar(&SelectorObjectSelectorObjectSpec.Id, cfg.FlagNamer("Selector ObjectSelector ObjectSpec Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ObjectSpec Id"), func() {
		req.Selector.ObjectSelector.Selector = &domain.ObjectSelector_ObjectSpec{ObjectSpec: SelectorObjectSelectorObjectSpec}
	})
	SelectorObjectSelectorResourceSpec := &domain.ObjectSelector_ResourceSpec{}
	cmd.PersistentFlags().StringVar(&SelectorObjectSelectorResourceSpec.ResourceSpec, cfg.FlagNamer("Selector ObjectSelector ResourceSpec"), "", "resoruce_spec represents that all objects in a resource are included in the selector.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ResourceSpec"), func() { req.Selector.ObjectSelector.Selector = SelectorObjectSelectorResourceSpec })
	SelectorRelationSelectorRelationName := &domain.RelationSelector_RelationName{}
	cmd.PersistentFlags().StringVar(&SelectorRelationSelectorRelationName.RelationName, cfg.FlagNamer("Selector RelationSelector RelationName"), "", "relation_name specifies a single relation which the selector represents.\n case sensitive string comparasion is used in the matching.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector RelationSelector RelationName"), func() { req.Selector.RelationSelector.Selector = SelectorRelationSelectorRelationName })
	SelectorSubjectSelectorSubjectSpec := &domain.Subject{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
	})
	SelectorSubjectSelectorSubjectSpecEntity := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_Entity{Entity: SelectorSubjectSelectorSubjectSpecEntity}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntity.Resource, cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Resource"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_Entity{Entity: SelectorSubjectSelectorSubjectSpecEntity}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntity.Id, cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Id"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_Entity{Entity: SelectorSubjectSelectorSubjectSpecEntity}
	})
	SelectorSubjectSelectorSubjectSpecEntitySet := &domain.EntitySet{
		Entity: &domain.Entity{},
	}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntitySet.Entity.Resource, cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Resource"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntitySet.Entity.Id, cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Id"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntitySet.Relation, cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Relation"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Relation"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	SelectorSubjectSelectorSubjectSpecResourceSet := &domain.ResourceSet{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_ResourceSet{ResourceSet: SelectorSubjectSelectorSubjectSpecResourceSet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecResourceSet.ResourceName, cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet ResourceName"), "", "resource_name is the name of the resource whose entities should be granted a relation")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet ResourceName"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_ResourceSet{ResourceSet: SelectorSubjectSelectorSubjectSpecResourceSet}
	})
	SelectorSubjectSelectorResourceSpec := &domain.SubjectSelector_ResourceSpec{}
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorResourceSpec.ResourceSpec, cfg.FlagNamer("Selector SubjectSelector ResourceSpec"), "", "resoruce_spec represents that all entities in a resource are included in the selector.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector ResourceSpec"), func() { req.Selector.SubjectSelector.Selector = SelectorSubjectSelectorResourceSpec })

	return cmd
}

func _PolicyServiceFindRelationshipRecordsCommand(cfg *client.Config) *cobra.Command {
	req := &FindRelationshipRecordsRequest{
		Selector: &domain.RelationshipSelector{
			ObjectSelector:   &domain.ObjectSelector{},
			RelationSelector: &domain.RelationSelector{},
			SubjectSelector:  &domain.SubjectSelector{},
		},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("FindRelationshipRecords"),
		Short: "FindRelationshipRecords RPC client",
		Long:  "FindRelationshipRecords returns all relationships which matches a SelectorSet",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "PolicyService", "FindRelationshipRecords"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewPolicyServiceClient(cc)
				v := &FindRelationshipRecordsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.FindRelationshipRecords(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.PolicyId, cfg.FlagNamer("PolicyId"), "", "")
	SelectorObjectSelectorObjectSpec := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector ObjectSelector ObjectSpec"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ObjectSpec"), func() {
		req.Selector.ObjectSelector.Selector = &domain.ObjectSelector_ObjectSpec{ObjectSpec: SelectorObjectSelectorObjectSpec}
	})
	cmd.PersistentFlags().StringVar(&SelectorObjectSelectorObjectSpec.Resource, cfg.FlagNamer("Selector ObjectSelector ObjectSpec Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ObjectSpec Resource"), func() {
		req.Selector.ObjectSelector.Selector = &domain.ObjectSelector_ObjectSpec{ObjectSpec: SelectorObjectSelectorObjectSpec}
	})
	cmd.PersistentFlags().StringVar(&SelectorObjectSelectorObjectSpec.Id, cfg.FlagNamer("Selector ObjectSelector ObjectSpec Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ObjectSpec Id"), func() {
		req.Selector.ObjectSelector.Selector = &domain.ObjectSelector_ObjectSpec{ObjectSpec: SelectorObjectSelectorObjectSpec}
	})
	SelectorObjectSelectorResourceSpec := &domain.ObjectSelector_ResourceSpec{}
	cmd.PersistentFlags().StringVar(&SelectorObjectSelectorResourceSpec.ResourceSpec, cfg.FlagNamer("Selector ObjectSelector ResourceSpec"), "", "resoruce_spec represents that all objects in a resource are included in the selector.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector ObjectSelector ResourceSpec"), func() { req.Selector.ObjectSelector.Selector = SelectorObjectSelectorResourceSpec })
	SelectorRelationSelectorRelationName := &domain.RelationSelector_RelationName{}
	cmd.PersistentFlags().StringVar(&SelectorRelationSelectorRelationName.RelationName, cfg.FlagNamer("Selector RelationSelector RelationName"), "", "relation_name specifies a single relation which the selector represents.\n case sensitive string comparasion is used in the matching.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector RelationSelector RelationName"), func() { req.Selector.RelationSelector.Selector = SelectorRelationSelectorRelationName })
	SelectorSubjectSelectorSubjectSpec := &domain.Subject{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
	})
	SelectorSubjectSelectorSubjectSpecEntity := &domain.Entity{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_Entity{Entity: SelectorSubjectSelectorSubjectSpecEntity}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntity.Resource, cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Resource"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_Entity{Entity: SelectorSubjectSelectorSubjectSpecEntity}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntity.Id, cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec Entity Id"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_Entity{Entity: SelectorSubjectSelectorSubjectSpecEntity}
	})
	SelectorSubjectSelectorSubjectSpecEntitySet := &domain.EntitySet{
		Entity: &domain.Entity{},
	}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntitySet.Entity.Resource, cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Resource"), "", "resource represents the resource name which will contain the entity")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Resource"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntitySet.Entity.Id, cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Id"), "", "id is an unique identifier for the entity within a resource")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Entity Id"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecEntitySet.Relation, cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Relation"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec EntitySet Relation"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_EntitySet{EntitySet: SelectorSubjectSelectorSubjectSpecEntitySet}
	})
	SelectorSubjectSelectorSubjectSpecResourceSet := &domain.ResourceSet{}
	cmd.PersistentFlags().Bool(cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet"), false, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_ResourceSet{ResourceSet: SelectorSubjectSelectorSubjectSpecResourceSet}
	})
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorSubjectSpecResourceSet.ResourceName, cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet ResourceName"), "", "resource_name is the name of the resource whose entities should be granted a relation")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector SubjectSpec ResourceSet ResourceName"), func() {
		req.Selector.SubjectSelector.Selector = &domain.SubjectSelector_SubjectSpec{SubjectSpec: SelectorSubjectSelectorSubjectSpec}
		SelectorSubjectSelectorSubjectSpec.Subject = &domain.Subject_ResourceSet{ResourceSet: SelectorSubjectSelectorSubjectSpecResourceSet}
	})
	SelectorSubjectSelectorResourceSpec := &domain.SubjectSelector_ResourceSpec{}
	cmd.PersistentFlags().StringVar(&SelectorSubjectSelectorResourceSpec.ResourceSpec, cfg.FlagNamer("Selector SubjectSelector ResourceSpec"), "", "resoruce_spec represents that all entities in a resource are included in the selector.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Selector SubjectSelector ResourceSpec"), func() { req.Selector.SubjectSelector.Selector = SelectorSubjectSelectorResourceSpec })

	return cmd
}
