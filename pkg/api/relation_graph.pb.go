// relation_graph.proto exposes an RPC service to operate over Zanzi's RelationGraph

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: zanzi/api/relation_graph.proto

package api

import (
	domain "github.com/sourcenetwork/zanzi/pkg/domain"
	_ "github.com/sourcenetwork/zanzi/pkg/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExplainFormat int32

const (
	ExplainFormat_SPEW ExplainFormat = 0
	ExplainFormat_JSON ExplainFormat = 1
	ExplainFormat_DOT  ExplainFormat = 2
)

// Enum value maps for ExplainFormat.
var (
	ExplainFormat_name = map[int32]string{
		0: "SPEW",
		1: "JSON",
		2: "DOT",
	}
	ExplainFormat_value = map[string]int32{
		"SPEW": 0,
		"JSON": 1,
		"DOT":  2,
	}
)

func (x ExplainFormat) Enum() *ExplainFormat {
	p := new(ExplainFormat)
	*p = x
	return p
}

func (x ExplainFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExplainFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_zanzi_api_relation_graph_proto_enumTypes[0].Descriptor()
}

func (ExplainFormat) Type() protoreflect.EnumType {
	return &file_zanzi_api_relation_graph_proto_enumTypes[0]
}

func (x ExplainFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExplainFormat.Descriptor instead.
func (ExplainFormat) EnumDescriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{0}
}

type DumpRelationshipsRequest_DumpFormat int32

const (
	DumpRelationshipsRequest_DOT DumpRelationshipsRequest_DumpFormat = 0
)

// Enum value maps for DumpRelationshipsRequest_DumpFormat.
var (
	DumpRelationshipsRequest_DumpFormat_name = map[int32]string{
		0: "DOT",
	}
	DumpRelationshipsRequest_DumpFormat_value = map[string]int32{
		"DOT": 0,
	}
)

func (x DumpRelationshipsRequest_DumpFormat) Enum() *DumpRelationshipsRequest_DumpFormat {
	p := new(DumpRelationshipsRequest_DumpFormat)
	*p = x
	return p
}

func (x DumpRelationshipsRequest_DumpFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpRelationshipsRequest_DumpFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_zanzi_api_relation_graph_proto_enumTypes[1].Descriptor()
}

func (DumpRelationshipsRequest_DumpFormat) Type() protoreflect.EnumType {
	return &file_zanzi_api_relation_graph_proto_enumTypes[1]
}

func (x DumpRelationshipsRequest_DumpFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpRelationshipsRequest_DumpFormat.Descriptor instead.
func (DumpRelationshipsRequest_DumpFormat) EnumDescriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{8, 0}
}

type CheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId      string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	AccessRequest *domain.AccessRequest `protobuf:"bytes,2,opt,name=access_request,json=accessRequest,proto3" json:"access_request,omitempty"`
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CheckRequest) GetAccessRequest() *domain.AccessRequest {
	if x != nil {
		return x.AccessRequest
	}
	return nil
}

type CheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CheckResponse_Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResponse) GetResult() *CheckResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExplainCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId      string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	AccessRequest *domain.AccessRequest `protobuf:"bytes,2,opt,name=access_request,json=accessRequest,proto3" json:"access_request,omitempty"`
	// format flags which format should be used to serialize the goal tree
	Format ExplainFormat `protobuf:"varint,3,opt,name=format,proto3,enum=sourcenetwork.zanzi.api.ExplainFormat" json:"format,omitempty"`
}

func (x *ExplainCheckRequest) Reset() {
	*x = ExplainCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainCheckRequest) ProtoMessage() {}

func (x *ExplainCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainCheckRequest.ProtoReflect.Descriptor instead.
func (*ExplainCheckRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{2}
}

func (x *ExplainCheckRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ExplainCheckRequest) GetAccessRequest() *domain.AccessRequest {
	if x != nil {
		return x.AccessRequest
	}
	return nil
}

func (x *ExplainCheckRequest) GetFormat() ExplainFormat {
	if x != nil {
		return x.Format
	}
	return ExplainFormat_SPEW
}

type ExplainCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// goal_tree is the serialized goal tree of the Check execution
	// NOTE Explain is a tool used for debugging and development purposes only.
	// The output of goal_tree IS NOT stable and may change.
	GoalTree   string        `protobuf:"bytes,1,opt,name=goal_tree,json=goalTree,proto3" json:"goal_tree,omitempty"`
	Authorized bool          `protobuf:"varint,2,opt,name=authorized,proto3" json:"authorized,omitempty"`
	Format     ExplainFormat `protobuf:"varint,3,opt,name=format,proto3,enum=sourcenetwork.zanzi.api.ExplainFormat" json:"format,omitempty"`
}

func (x *ExplainCheckResponse) Reset() {
	*x = ExplainCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainCheckResponse) ProtoMessage() {}

func (x *ExplainCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainCheckResponse.ProtoReflect.Descriptor instead.
func (*ExplainCheckResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{3}
}

func (x *ExplainCheckResponse) GetGoalTree() string {
	if x != nil {
		return x.GoalTree
	}
	return ""
}

func (x *ExplainCheckResponse) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *ExplainCheckResponse) GetFormat() ExplainFormat {
	if x != nil {
		return x.Format
	}
	return ExplainFormat_SPEW
}

type ExpandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string               `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Root     *domain.RelationNode `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	Format   ExplainFormat        `protobuf:"varint,3,opt,name=format,proto3,enum=sourcenetwork.zanzi.api.ExplainFormat" json:"format,omitempty"`
}

func (x *ExpandRequest) Reset() {
	*x = ExpandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandRequest) ProtoMessage() {}

func (x *ExpandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandRequest.ProtoReflect.Descriptor instead.
func (*ExpandRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{4}
}

func (x *ExpandRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ExpandRequest) GetRoot() *domain.RelationNode {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *ExpandRequest) GetFormat() ExplainFormat {
	if x != nil {
		return x.Format
	}
	return ExplainFormat_SPEW
}

type ExpandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalTree string        `protobuf:"bytes,1,opt,name=goal_tree,json=goalTree,proto3" json:"goal_tree,omitempty"`
	Format   ExplainFormat `protobuf:"varint,2,opt,name=format,proto3,enum=sourcenetwork.zanzi.api.ExplainFormat" json:"format,omitempty"`
}

func (x *ExpandResponse) Reset() {
	*x = ExpandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandResponse) ProtoMessage() {}

func (x *ExpandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandResponse.ProtoReflect.Descriptor instead.
func (*ExpandResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{5}
}

func (x *ExpandResponse) GetGoalTree() string {
	if x != nil {
		return x.GoalTree
	}
	return ""
}

func (x *ExpandResponse) GetFormat() ExplainFormat {
	if x != nil {
		return x.Format
	}
	return ExplainFormat_SPEW
}

type MultiCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string                       `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Selector *domain.RelationNodeSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	Subject  *domain.Entity               `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *MultiCheckRequest) Reset() {
	*x = MultiCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCheckRequest) ProtoMessage() {}

func (x *MultiCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCheckRequest.ProtoReflect.Descriptor instead.
func (*MultiCheckRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{6}
}

func (x *MultiCheckRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *MultiCheckRequest) GetSelector() *domain.RelationNodeSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *MultiCheckRequest) GetSubject() *domain.Entity {
	if x != nil {
		return x.Subject
	}
	return nil
}

type MultiCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*MultiCheckResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *MultiCheckResponse) Reset() {
	*x = MultiCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCheckResponse) ProtoMessage() {}

func (x *MultiCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCheckResponse.ProtoReflect.Descriptor instead.
func (*MultiCheckResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{7}
}

func (x *MultiCheckResponse) GetResults() []*MultiCheckResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type DumpRelationshipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string                              `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Format   DumpRelationshipsRequest_DumpFormat `protobuf:"varint,2,opt,name=format,proto3,enum=sourcenetwork.zanzi.api.DumpRelationshipsRequest_DumpFormat" json:"format,omitempty"`
}

func (x *DumpRelationshipsRequest) Reset() {
	*x = DumpRelationshipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRelationshipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRelationshipsRequest) ProtoMessage() {}

func (x *DumpRelationshipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRelationshipsRequest.ProtoReflect.Descriptor instead.
func (*DumpRelationshipsRequest) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{8}
}

func (x *DumpRelationshipsRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *DumpRelationshipsRequest) GetFormat() DumpRelationshipsRequest_DumpFormat {
	if x != nil {
		return x.Format
	}
	return DumpRelationshipsRequest_DOT
}

type DumpRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Dump:
	//	*DumpRelationshipResponse_Tree
	//	*DumpRelationshipResponse_Dot
	Dump isDumpRelationshipResponse_Dump `protobuf_oneof:"dump"`
}

func (x *DumpRelationshipResponse) Reset() {
	*x = DumpRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRelationshipResponse) ProtoMessage() {}

func (x *DumpRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRelationshipResponse.ProtoReflect.Descriptor instead.
func (*DumpRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{9}
}

func (m *DumpRelationshipResponse) GetDump() isDumpRelationshipResponse_Dump {
	if m != nil {
		return m.Dump
	}
	return nil
}

func (x *DumpRelationshipResponse) GetTree() *domain.RelationTree {
	if x, ok := x.GetDump().(*DumpRelationshipResponse_Tree); ok {
		return x.Tree
	}
	return nil
}

func (x *DumpRelationshipResponse) GetDot() string {
	if x, ok := x.GetDump().(*DumpRelationshipResponse_Dot); ok {
		return x.Dot
	}
	return ""
}

type isDumpRelationshipResponse_Dump interface {
	isDumpRelationshipResponse_Dump()
}

type DumpRelationshipResponse_Tree struct {
	Tree *domain.RelationTree `protobuf:"bytes,1,opt,name=tree,proto3,oneof"`
}

type DumpRelationshipResponse_Dot struct {
	Dot string `protobuf:"bytes,2,opt,name=dot,proto3,oneof"`
}

func (*DumpRelationshipResponse_Tree) isDumpRelationshipResponse_Dump() {}

func (*DumpRelationshipResponse_Dot) isDumpRelationshipResponse_Dump() {}

type CheckResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorized bool `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized,omitempty"`
}

func (x *CheckResponse_Result) Reset() {
	*x = CheckResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse_Result) ProtoMessage() {}

func (x *CheckResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse_Result.ProtoReflect.Descriptor instead.
func (*CheckResponse_Result) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CheckResponse_Result) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

// NOTE Subject to change.
// It might be better to use a map instead of a list
// or group results by relations.
type MultiCheckResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorized bool                 `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized,omitempty"`
	Node       *domain.RelationNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *MultiCheckResponse_Result) Reset() {
	*x = MultiCheckResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_api_relation_graph_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCheckResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCheckResponse_Result) ProtoMessage() {}

func (x *MultiCheckResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_api_relation_graph_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCheckResponse_Result.ProtoReflect.Descriptor instead.
func (*MultiCheckResponse_Result) Descriptor() ([]byte, []int) {
	return file_zanzi_api_relation_graph_proto_rawDescGZIP(), []int{7, 0}
}

func (x *MultiCheckResponse_Result) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *MultiCheckResponse_Result) GetNode() *domain.RelationNode {
	if x != nil {
		return x.Node
	}
	return nil
}

var File_zanzi_api_relation_graph_proto protoreflect.FileDescriptor

var file_zanzi_api_relation_graph_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x7a, 0x61, 0x6e, 0x7a,
	0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x0c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0x28, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0xc4, 0x01, 0x0a,
	0x13, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x6f, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x6d, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x61,
	0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x66, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x15, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x4f, 0x54, 0x10, 0x00, 0x22, 0x76, 0x0a, 0x18, 0x44, 0x75, 0x6d, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x64, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6f, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x75, 0x6d, 0x70,
	0x2a, 0x2c, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x45, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x54, 0x10, 0x02, 0x32, 0xaa,
	0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x12, 0x56, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12,
	0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x79, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zanzi_api_relation_graph_proto_rawDescOnce sync.Once
	file_zanzi_api_relation_graph_proto_rawDescData = file_zanzi_api_relation_graph_proto_rawDesc
)

func file_zanzi_api_relation_graph_proto_rawDescGZIP() []byte {
	file_zanzi_api_relation_graph_proto_rawDescOnce.Do(func() {
		file_zanzi_api_relation_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_zanzi_api_relation_graph_proto_rawDescData)
	})
	return file_zanzi_api_relation_graph_proto_rawDescData
}

var file_zanzi_api_relation_graph_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zanzi_api_relation_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_zanzi_api_relation_graph_proto_goTypes = []interface{}{
	(ExplainFormat)(0),                       // 0: sourcenetwork.zanzi.api.ExplainFormat
	(DumpRelationshipsRequest_DumpFormat)(0), // 1: sourcenetwork.zanzi.api.DumpRelationshipsRequest.DumpFormat
	(*CheckRequest)(nil),                     // 2: sourcenetwork.zanzi.api.CheckRequest
	(*CheckResponse)(nil),                    // 3: sourcenetwork.zanzi.api.CheckResponse
	(*ExplainCheckRequest)(nil),              // 4: sourcenetwork.zanzi.api.ExplainCheckRequest
	(*ExplainCheckResponse)(nil),             // 5: sourcenetwork.zanzi.api.ExplainCheckResponse
	(*ExpandRequest)(nil),                    // 6: sourcenetwork.zanzi.api.ExpandRequest
	(*ExpandResponse)(nil),                   // 7: sourcenetwork.zanzi.api.ExpandResponse
	(*MultiCheckRequest)(nil),                // 8: sourcenetwork.zanzi.api.MultiCheckRequest
	(*MultiCheckResponse)(nil),               // 9: sourcenetwork.zanzi.api.MultiCheckResponse
	(*DumpRelationshipsRequest)(nil),         // 10: sourcenetwork.zanzi.api.DumpRelationshipsRequest
	(*DumpRelationshipResponse)(nil),         // 11: sourcenetwork.zanzi.api.DumpRelationshipResponse
	(*CheckResponse_Result)(nil),             // 12: sourcenetwork.zanzi.api.CheckResponse.Result
	(*MultiCheckResponse_Result)(nil),        // 13: sourcenetwork.zanzi.api.MultiCheckResponse.Result
	(*domain.AccessRequest)(nil),             // 14: sourcenetwork.zanzi.domain.AccessRequest
	(*domain.RelationNode)(nil),              // 15: sourcenetwork.zanzi.domain.RelationNode
	(*domain.RelationNodeSelector)(nil),      // 16: sourcenetwork.zanzi.domain.RelationNodeSelector
	(*domain.Entity)(nil),                    // 17: sourcenetwork.zanzi.domain.Entity
	(*domain.RelationTree)(nil),              // 18: sourcenetwork.zanzi.domain.RelationTree
}
var file_zanzi_api_relation_graph_proto_depIdxs = []int32{
	14, // 0: sourcenetwork.zanzi.api.CheckRequest.access_request:type_name -> sourcenetwork.zanzi.domain.AccessRequest
	12, // 1: sourcenetwork.zanzi.api.CheckResponse.result:type_name -> sourcenetwork.zanzi.api.CheckResponse.Result
	14, // 2: sourcenetwork.zanzi.api.ExplainCheckRequest.access_request:type_name -> sourcenetwork.zanzi.domain.AccessRequest
	0,  // 3: sourcenetwork.zanzi.api.ExplainCheckRequest.format:type_name -> sourcenetwork.zanzi.api.ExplainFormat
	0,  // 4: sourcenetwork.zanzi.api.ExplainCheckResponse.format:type_name -> sourcenetwork.zanzi.api.ExplainFormat
	15, // 5: sourcenetwork.zanzi.api.ExpandRequest.root:type_name -> sourcenetwork.zanzi.domain.RelationNode
	0,  // 6: sourcenetwork.zanzi.api.ExpandRequest.format:type_name -> sourcenetwork.zanzi.api.ExplainFormat
	0,  // 7: sourcenetwork.zanzi.api.ExpandResponse.format:type_name -> sourcenetwork.zanzi.api.ExplainFormat
	16, // 8: sourcenetwork.zanzi.api.MultiCheckRequest.selector:type_name -> sourcenetwork.zanzi.domain.RelationNodeSelector
	17, // 9: sourcenetwork.zanzi.api.MultiCheckRequest.subject:type_name -> sourcenetwork.zanzi.domain.Entity
	13, // 10: sourcenetwork.zanzi.api.MultiCheckResponse.results:type_name -> sourcenetwork.zanzi.api.MultiCheckResponse.Result
	1,  // 11: sourcenetwork.zanzi.api.DumpRelationshipsRequest.format:type_name -> sourcenetwork.zanzi.api.DumpRelationshipsRequest.DumpFormat
	18, // 12: sourcenetwork.zanzi.api.DumpRelationshipResponse.tree:type_name -> sourcenetwork.zanzi.domain.RelationTree
	15, // 13: sourcenetwork.zanzi.api.MultiCheckResponse.Result.node:type_name -> sourcenetwork.zanzi.domain.RelationNode
	2,  // 14: sourcenetwork.zanzi.api.RelationGraph.Check:input_type -> sourcenetwork.zanzi.api.CheckRequest
	4,  // 15: sourcenetwork.zanzi.api.RelationGraph.ExplainCheck:input_type -> sourcenetwork.zanzi.api.ExplainCheckRequest
	6,  // 16: sourcenetwork.zanzi.api.RelationGraph.Expand:input_type -> sourcenetwork.zanzi.api.ExpandRequest
	10, // 17: sourcenetwork.zanzi.api.RelationGraph.DumpRelationships:input_type -> sourcenetwork.zanzi.api.DumpRelationshipsRequest
	3,  // 18: sourcenetwork.zanzi.api.RelationGraph.Check:output_type -> sourcenetwork.zanzi.api.CheckResponse
	5,  // 19: sourcenetwork.zanzi.api.RelationGraph.ExplainCheck:output_type -> sourcenetwork.zanzi.api.ExplainCheckResponse
	7,  // 20: sourcenetwork.zanzi.api.RelationGraph.Expand:output_type -> sourcenetwork.zanzi.api.ExpandResponse
	11, // 21: sourcenetwork.zanzi.api.RelationGraph.DumpRelationships:output_type -> sourcenetwork.zanzi.api.DumpRelationshipResponse
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_zanzi_api_relation_graph_proto_init() }
func file_zanzi_api_relation_graph_proto_init() {
	if File_zanzi_api_relation_graph_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zanzi_api_relation_graph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpRelationshipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_api_relation_graph_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCheckResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zanzi_api_relation_graph_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*DumpRelationshipResponse_Tree)(nil),
		(*DumpRelationshipResponse_Dot)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zanzi_api_relation_graph_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zanzi_api_relation_graph_proto_goTypes,
		DependencyIndexes: file_zanzi_api_relation_graph_proto_depIdxs,
		EnumInfos:         file_zanzi_api_relation_graph_proto_enumTypes,
		MessageInfos:      file_zanzi_api_relation_graph_proto_msgTypes,
	}.Build()
	File_zanzi_api_relation_graph_proto = out.File
	file_zanzi_api_relation_graph_proto_rawDesc = nil
	file_zanzi_api_relation_graph_proto_goTypes = nil
	file_zanzi_api_relation_graph_proto_depIdxs = nil
}
