// relation_graph.proto exposes an RPC service to operate over Zanzi's RelationGraph

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: zanzi/api/relation_graph.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelationGraph_Check_FullMethodName             = "/sourcenetwork.zanzi.api.RelationGraph/Check"
	RelationGraph_ExplainCheck_FullMethodName      = "/sourcenetwork.zanzi.api.RelationGraph/ExplainCheck"
	RelationGraph_Expand_FullMethodName            = "/sourcenetwork.zanzi.api.RelationGraph/Expand"
	RelationGraph_DumpRelationships_FullMethodName = "/sourcenetwork.zanzi.api.RelationGraph/DumpRelationships"
)

// RelationGraphClient is the client API for RelationGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationGraphClient interface {
	// Check verifies whether some subject has some relation to an object.
	// Effectively this means a Graph Walk through the Relation Graph.
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// ExplainCheck performs a Check call but outputs a serialized version of the goal tree.
	// The goal tree can be used to understand the internals of the RelationGraph search and to debug.
	// Note that the output of Explain Check IS NOT stable and it must be used for debug only.
	ExplainCheck(ctx context.Context, in *ExplainCheckRequest, opts ...grpc.CallOption) (*ExplainCheckResponse, error)
	// Expand returns a GoalTree used to scan all nodes reachable from a stating point.
	// Note that the output of Expand IS NOT stable and it must be used for debug only.
	Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (*ExpandResponse, error)
	// DumpRelationships walks over a Policy's Relation Graph and returns
	// a tree representaion of the Relationships set within a policy.
	// Note that it *does not* perform evaluates relation rewrite rule,
	// meaning that only explicit Relationship Tuples are dumped.
	DumpRelationships(ctx context.Context, in *DumpRelationshipsRequest, opts ...grpc.CallOption) (*DumpRelationshipResponse, error)
}

type relationGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationGraphClient(cc grpc.ClientConnInterface) RelationGraphClient {
	return &relationGraphClient{cc}
}

func (c *relationGraphClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, RelationGraph_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationGraphClient) ExplainCheck(ctx context.Context, in *ExplainCheckRequest, opts ...grpc.CallOption) (*ExplainCheckResponse, error) {
	out := new(ExplainCheckResponse)
	err := c.cc.Invoke(ctx, RelationGraph_ExplainCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationGraphClient) Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (*ExpandResponse, error) {
	out := new(ExpandResponse)
	err := c.cc.Invoke(ctx, RelationGraph_Expand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationGraphClient) DumpRelationships(ctx context.Context, in *DumpRelationshipsRequest, opts ...grpc.CallOption) (*DumpRelationshipResponse, error) {
	out := new(DumpRelationshipResponse)
	err := c.cc.Invoke(ctx, RelationGraph_DumpRelationships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationGraphServer is the server API for RelationGraph service.
// All implementations must embed UnimplementedRelationGraphServer
// for forward compatibility
type RelationGraphServer interface {
	// Check verifies whether some subject has some relation to an object.
	// Effectively this means a Graph Walk through the Relation Graph.
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// ExplainCheck performs a Check call but outputs a serialized version of the goal tree.
	// The goal tree can be used to understand the internals of the RelationGraph search and to debug.
	// Note that the output of Explain Check IS NOT stable and it must be used for debug only.
	ExplainCheck(context.Context, *ExplainCheckRequest) (*ExplainCheckResponse, error)
	// Expand returns a GoalTree used to scan all nodes reachable from a stating point.
	// Note that the output of Expand IS NOT stable and it must be used for debug only.
	Expand(context.Context, *ExpandRequest) (*ExpandResponse, error)
	// DumpRelationships walks over a Policy's Relation Graph and returns
	// a tree representaion of the Relationships set within a policy.
	// Note that it *does not* perform evaluates relation rewrite rule,
	// meaning that only explicit Relationship Tuples are dumped.
	DumpRelationships(context.Context, *DumpRelationshipsRequest) (*DumpRelationshipResponse, error)
	mustEmbedUnimplementedRelationGraphServer()
}

// UnimplementedRelationGraphServer must be embedded to have forward compatible implementations.
type UnimplementedRelationGraphServer struct {
}

func (UnimplementedRelationGraphServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedRelationGraphServer) ExplainCheck(context.Context, *ExplainCheckRequest) (*ExplainCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplainCheck not implemented")
}
func (UnimplementedRelationGraphServer) Expand(context.Context, *ExpandRequest) (*ExpandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (UnimplementedRelationGraphServer) DumpRelationships(context.Context, *DumpRelationshipsRequest) (*DumpRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpRelationships not implemented")
}
func (UnimplementedRelationGraphServer) mustEmbedUnimplementedRelationGraphServer() {}

// UnsafeRelationGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationGraphServer will
// result in compilation errors.
type UnsafeRelationGraphServer interface {
	mustEmbedUnimplementedRelationGraphServer()
}

func RegisterRelationGraphServer(s grpc.ServiceRegistrar, srv RelationGraphServer) {
	s.RegisterService(&RelationGraph_ServiceDesc, srv)
}

func _RelationGraph_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationGraphServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationGraph_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationGraphServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationGraph_ExplainCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationGraphServer).ExplainCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationGraph_ExplainCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationGraphServer).ExplainCheck(ctx, req.(*ExplainCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationGraph_Expand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationGraphServer).Expand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationGraph_Expand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationGraphServer).Expand(ctx, req.(*ExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationGraph_DumpRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationGraphServer).DumpRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationGraph_DumpRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationGraphServer).DumpRelationships(ctx, req.(*DumpRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationGraph_ServiceDesc is the grpc.ServiceDesc for RelationGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sourcenetwork.zanzi.api.RelationGraph",
	HandlerType: (*RelationGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _RelationGraph_Check_Handler,
		},
		{
			MethodName: "ExplainCheck",
			Handler:    _RelationGraph_ExplainCheck_Handler,
		},
		{
			MethodName: "Expand",
			Handler:    _RelationGraph_Expand_Handler,
		},
		{
			MethodName: "DumpRelationships",
			Handler:    _RelationGraph_DumpRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zanzi/api/relation_graph.proto",
}
