// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zanzi/types/graph.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GraphEdge with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GraphEdge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GraphEdge with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GraphEdgeMultiError, or nil
// if none found.
func (m *GraphEdge) ValidateAll() error {
	return m.validate(true)
}

func (m *GraphEdge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Dest

	// no validation rules for Label

	if len(errors) > 0 {
		return GraphEdgeMultiError(errors)
	}

	return nil
}

// GraphEdgeMultiError is an error wrapping multiple validation errors returned
// by GraphEdge.ValidateAll() if the designated constraints aren't met.
type GraphEdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GraphEdgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GraphEdgeMultiError) AllErrors() []error { return m }

// GraphEdgeValidationError is the validation error returned by
// GraphEdge.Validate if the designated constraints aren't met.
type GraphEdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GraphEdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GraphEdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GraphEdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GraphEdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GraphEdgeValidationError) ErrorName() string { return "GraphEdgeValidationError" }

// Error satisfies the builtin error interface
func (e GraphEdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraphEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GraphEdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GraphEdgeValidationError{}

// Validate checks the field values on GraphNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GraphNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GraphNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GraphNodeMultiError, or nil
// if none found.
func (m *GraphNode) ValidateAll() error {
	return m.validate(true)
}

func (m *GraphNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Data

	if len(errors) > 0 {
		return GraphNodeMultiError(errors)
	}

	return nil
}

// GraphNodeMultiError is an error wrapping multiple validation errors returned
// by GraphNode.ValidateAll() if the designated constraints aren't met.
type GraphNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GraphNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GraphNodeMultiError) AllErrors() []error { return m }

// GraphNodeValidationError is the validation error returned by
// GraphNode.Validate if the designated constraints aren't met.
type GraphNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GraphNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GraphNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GraphNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GraphNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GraphNodeValidationError) ErrorName() string { return "GraphNodeValidationError" }

// Error satisfies the builtin error interface
func (e GraphNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraphNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GraphNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GraphNodeValidationError{}

// Validate checks the field values on EdgeMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EdgeMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EdgeMap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EdgeMapMultiError, or nil if none found.
func (m *EdgeMap) ValidateAll() error {
	return m.validate(true)
}

func (m *EdgeMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetEdges()))
		i := 0
		for key := range m.GetEdges() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEdges()[key]
			_ = val

			// no validation rules for Edges[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EdgeMapValidationError{
							field:  fmt.Sprintf("Edges[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EdgeMapValidationError{
							field:  fmt.Sprintf("Edges[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EdgeMapValidationError{
						field:  fmt.Sprintf("Edges[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return EdgeMapMultiError(errors)
	}

	return nil
}

// EdgeMapMultiError is an error wrapping multiple validation errors returned
// by EdgeMap.ValidateAll() if the designated constraints aren't met.
type EdgeMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeMapMultiError) AllErrors() []error { return m }

// EdgeMapValidationError is the validation error returned by EdgeMap.Validate
// if the designated constraints aren't met.
type EdgeMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeMapValidationError) ErrorName() string { return "EdgeMapValidationError" }

// Error satisfies the builtin error interface
func (e EdgeMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdgeMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeMapValidationError{}

// Validate checks the field values on MapDiGraph with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapDiGraph) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapDiGraph with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapDiGraphMultiError, or
// nil if none found.
func (m *MapDiGraph) ValidateAll() error {
	return m.validate(true)
}

func (m *MapDiGraph) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetNodes()))
		i := 0
		for key := range m.GetNodes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNodes()[key]
			_ = val

			// no validation rules for Nodes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MapDiGraphValidationError{
							field:  fmt.Sprintf("Nodes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MapDiGraphValidationError{
							field:  fmt.Sprintf("Nodes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MapDiGraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetForwardEdges()))
		i := 0
		for key := range m.GetForwardEdges() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetForwardEdges()[key]
			_ = val

			// no validation rules for ForwardEdges[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MapDiGraphValidationError{
							field:  fmt.Sprintf("ForwardEdges[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MapDiGraphValidationError{
							field:  fmt.Sprintf("ForwardEdges[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MapDiGraphValidationError{
						field:  fmt.Sprintf("ForwardEdges[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetBackEdges()))
		i := 0
		for key := range m.GetBackEdges() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBackEdges()[key]
			_ = val

			// no validation rules for BackEdges[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MapDiGraphValidationError{
							field:  fmt.Sprintf("BackEdges[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MapDiGraphValidationError{
							field:  fmt.Sprintf("BackEdges[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MapDiGraphValidationError{
						field:  fmt.Sprintf("BackEdges[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MapDiGraphMultiError(errors)
	}

	return nil
}

// MapDiGraphMultiError is an error wrapping multiple validation errors
// returned by MapDiGraph.ValidateAll() if the designated constraints aren't met.
type MapDiGraphMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapDiGraphMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapDiGraphMultiError) AllErrors() []error { return m }

// MapDiGraphValidationError is the validation error returned by
// MapDiGraph.Validate if the designated constraints aren't met.
type MapDiGraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapDiGraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapDiGraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapDiGraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapDiGraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapDiGraphValidationError) ErrorName() string { return "MapDiGraphValidationError" }

// Error satisfies the builtin error interface
func (e MapDiGraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapDiGraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapDiGraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapDiGraphValidationError{}

// Validate checks the field values on ListDiGraph with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDiGraph) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiGraph with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDiGraphMultiError, or
// nil if none found.
func (m *ListDiGraph) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiGraph) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDiGraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDiGraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDiGraphValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEdges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDiGraphValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDiGraphValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDiGraphValidationError{
					field:  fmt.Sprintf("Edges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDiGraphMultiError(errors)
	}

	return nil
}

// ListDiGraphMultiError is an error wrapping multiple validation errors
// returned by ListDiGraph.ValidateAll() if the designated constraints aren't met.
type ListDiGraphMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiGraphMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiGraphMultiError) AllErrors() []error { return m }

// ListDiGraphValidationError is the validation error returned by
// ListDiGraph.Validate if the designated constraints aren't met.
type ListDiGraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiGraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiGraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiGraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiGraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiGraphValidationError) ErrorName() string { return "ListDiGraphValidationError" }

// Error satisfies the builtin error interface
func (e ListDiGraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiGraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiGraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiGraphValidationError{}
