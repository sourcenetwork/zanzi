// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zanzi/types/expand_tree.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VerboseExpandTree with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerboseExpandTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerboseExpandTree with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerboseExpandTreeMultiError, or nil if none found.
func (m *VerboseExpandTree) ValidateAll() error {
	return m.validate(true)
}

func (m *VerboseExpandTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerboseExpandTreeValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerboseExpandTreeValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerboseExpandTreeValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Relation

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerboseExpandTreeValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerboseExpandTreeValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerboseExpandTreeValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerboseExpandTreeMultiError(errors)
	}

	return nil
}

// VerboseExpandTreeMultiError is an error wrapping multiple validation errors
// returned by VerboseExpandTree.ValidateAll() if the designated constraints
// aren't met.
type VerboseExpandTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerboseExpandTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerboseExpandTreeMultiError) AllErrors() []error { return m }

// VerboseExpandTreeValidationError is the validation error returned by
// VerboseExpandTree.Validate if the designated constraints aren't met.
type VerboseExpandTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerboseExpandTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerboseExpandTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerboseExpandTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerboseExpandTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerboseExpandTreeValidationError) ErrorName() string {
	return "VerboseExpandTreeValidationError"
}

// Error satisfies the builtin error interface
func (e VerboseExpandTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerboseExpandTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerboseExpandTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerboseExpandTreeValidationError{}

// Validate checks the field values on ExpressionNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpressionNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpressionNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionNodeMultiError,
// or nil if none found.
func (m *ExpressionNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpressionNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Node.(type) {
	case *ExpressionNode_FactorNode:
		if v == nil {
			err := ExpressionNodeValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFactorNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionNodeValidationError{
						field:  "FactorNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionNodeValidationError{
						field:  "FactorNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFactorNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionNodeValidationError{
					field:  "FactorNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExpressionNode_OpNode:
		if v == nil {
			err := ExpressionNodeValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOpNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionNodeValidationError{
						field:  "OpNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionNodeValidationError{
						field:  "OpNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionNodeValidationError{
					field:  "OpNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExpressionNodeMultiError(errors)
	}

	return nil
}

// ExpressionNodeMultiError is an error wrapping multiple validation errors
// returned by ExpressionNode.ValidateAll() if the designated constraints
// aren't met.
type ExpressionNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionNodeMultiError) AllErrors() []error { return m }

// ExpressionNodeValidationError is the validation error returned by
// ExpressionNode.Validate if the designated constraints aren't met.
type ExpressionNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionNodeValidationError) ErrorName() string { return "ExpressionNodeValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpressionNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionNodeValidationError{}

// Validate checks the field values on FactorNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FactorNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FactorNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FactorNodeMultiError, or
// nil if none found.
func (m *FactorNode) ValidateAll() error {
	return m.validate(true)
}

func (m *FactorNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RewriteRule

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FactorNodeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FactorNodeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FactorNodeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FactorNodeMultiError(errors)
	}

	return nil
}

// FactorNodeMultiError is an error wrapping multiple validation errors
// returned by FactorNode.ValidateAll() if the designated constraints aren't met.
type FactorNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FactorNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FactorNodeMultiError) AllErrors() []error { return m }

// FactorNodeValidationError is the validation error returned by
// FactorNode.Validate if the designated constraints aren't met.
type FactorNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FactorNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FactorNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FactorNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FactorNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FactorNodeValidationError) ErrorName() string { return "FactorNodeValidationError" }

// Error satisfies the builtin error interface
func (e FactorNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFactorNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FactorNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FactorNodeValidationError{}

// Validate checks the field values on OpNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpNode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpNodeMultiError, or nil if none found.
func (m *OpNode) ValidateAll() error {
	return m.validate(true)
}

func (m *OpNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLeft()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Left",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Left",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeft()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpNodeValidationError{
				field:  "Left",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetRight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Right",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Right",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpNodeValidationError{
				field:  "Right",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpNodeMultiError(errors)
	}

	return nil
}

// OpNodeMultiError is an error wrapping multiple validation errors returned by
// OpNode.ValidateAll() if the designated constraints aren't met.
type OpNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpNodeMultiError) AllErrors() []error { return m }

// OpNodeValidationError is the validation error returned by OpNode.Validate if
// the designated constraints aren't met.
type OpNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpNodeValidationError) ErrorName() string { return "OpNodeValidationError" }

// Error satisfies the builtin error interface
func (e OpNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpNodeValidationError{}
