// policy.proto contains Zanzi's Policy definition

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: zanzi/domain/policy.proto

package domain

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Policy encapsulate an isolated authorization environment, which models an application authorization needs.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies a Policy - with a used defined identifier - accross the system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Display name for a Policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Describes context and any additional information of interest for Policy users.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// set of Resources defined by a Policy
	Resources []*Resource `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	// key-value string attributes supplied by the user
	Attributes map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{0}
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Policy) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// PolicyRecord is a pair containing a Policy definition and its associated data
type PolicyRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy object
	Policy *Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Opaque, user supplied, satellite data associated to a Policy
	AppData []byte `protobuf:"bytes,2,opt,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
	// timestamp of creation moment
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PolicyRecord) Reset() {
	*x = PolicyRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRecord) ProtoMessage() {}

func (x *PolicyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRecord.ProtoReflect.Descriptor instead.
func (*PolicyRecord) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyRecord) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *PolicyRecord) GetAppData() []byte {
	if x != nil {
		return x.AppData
	}
	return nil
}

func (x *PolicyRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Resources represents a class of objects in the relation graph
// Example resources: files, directories, repositories, groups
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name.
	// Must be unique within a Policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// User supplied documentation for resource
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// relations defined within Resource
	Relations []*Relation `protobuf:"bytes,3,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Resource) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

// Relation defines a logical relation between a set of objects and subjects.
// A Relation is defined through a rewrite_expression, which expresses a Zanzizar
// userset rewrite expression.
// The rewrite_expression is a mini-language used to build rewrite expressions.
// Relations are contained within a resource
type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relation name.
	// Must be unique within a Resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// User supplied documentation
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// A RelationExpression specifying an evaluation strategy which is used by RelationGraph.
	RelationExpression *RelationExpression `protobuf:"bytes,3,opt,name=relation_expression,json=relationExpression,proto3" json:"relation_expression,omitempty"`
	// subject_restriction specifies the permissible types of subjects for
	// Relationships with the current relation
	SubjectRestriction *SubjectRestriction `protobuf:"bytes,4,opt,name=subject_restriction,json=subjectRestriction,proto3" json:"subject_restriction,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Relation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Relation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Relation) GetRelationExpression() *RelationExpression {
	if x != nil {
		return x.RelationExpression
	}
	return nil
}

func (x *Relation) GetSubjectRestriction() *SubjectRestriction {
	if x != nil {
		return x.SubjectRestriction
	}
	return nil
}

// SubjectRestriction models a set of conditions which a Relationship's Subject must match
// in order for a Policy to accept a Relationship.
//
// Analogous to a Value Restriction from Description Logic
type SubjectRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubjectRestriction:
	//	*SubjectRestriction_RestrictionSet
	//	*SubjectRestriction_UniversalSet
	SubjectRestriction isSubjectRestriction_SubjectRestriction `protobuf_oneof:"subject_restriction"`
}

func (x *SubjectRestriction) Reset() {
	*x = SubjectRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectRestriction) ProtoMessage() {}

func (x *SubjectRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectRestriction.ProtoReflect.Descriptor instead.
func (*SubjectRestriction) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{4}
}

func (m *SubjectRestriction) GetSubjectRestriction() isSubjectRestriction_SubjectRestriction {
	if m != nil {
		return m.SubjectRestriction
	}
	return nil
}

func (x *SubjectRestriction) GetRestrictionSet() *SubjectRestrictionSet {
	if x, ok := x.GetSubjectRestriction().(*SubjectRestriction_RestrictionSet); ok {
		return x.RestrictionSet
	}
	return nil
}

func (x *SubjectRestriction) GetUniversalSet() *UniversalSet {
	if x, ok := x.GetSubjectRestriction().(*SubjectRestriction_UniversalSet); ok {
		return x.UniversalSet
	}
	return nil
}

type isSubjectRestriction_SubjectRestriction interface {
	isSubjectRestriction_SubjectRestriction()
}

type SubjectRestriction_RestrictionSet struct {
	RestrictionSet *SubjectRestrictionSet `protobuf:"bytes,1,opt,name=restriction_set,json=restrictionSet,proto3,oneof"`
}

type SubjectRestriction_UniversalSet struct {
	UniversalSet *UniversalSet `protobuf:"bytes,2,opt,name=universal_set,json=universalSet,proto3,oneof"`
}

func (*SubjectRestriction_RestrictionSet) isSubjectRestriction_SubjectRestriction() {}

func (*SubjectRestriction_UniversalSet) isSubjectRestriction_SubjectRestriction() {}

// EntityRestriction represents a restriction where any resource's entity
// is accepted as the Subject for a Relationship.
type EntityRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource_name is the name of the accepted entity's resource.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (x *EntityRestriction) Reset() {
	*x = EntityRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRestriction) ProtoMessage() {}

func (x *EntityRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRestriction.ProtoReflect.Descriptor instead.
func (*EntityRestriction) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{5}
}

func (x *EntityRestriction) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

// EntitySetRestriction represents a restriction where only EntitySets
// composed by the given resource and relation are accepted.
type EntitySetRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	RelationName string `protobuf:"bytes,2,opt,name=relation_name,json=relationName,proto3" json:"relation_name,omitempty"`
}

func (x *EntitySetRestriction) Reset() {
	*x = EntitySetRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySetRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySetRestriction) ProtoMessage() {}

func (x *EntitySetRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySetRestriction.ProtoReflect.Descriptor instead.
func (*EntitySetRestriction) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{6}
}

func (x *EntitySetRestriction) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *EntitySetRestriction) GetRelationName() string {
	if x != nil {
		return x.RelationName
	}
	return ""
}

// UniversalSet represents the set of all possible subjects.
// This is equvalent to stating that all Subjects are allowed for the Relationship.
type UniversalSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UniversalSet) Reset() {
	*x = UniversalSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalSet) ProtoMessage() {}

func (x *UniversalSet) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalSet.ProtoReflect.Descriptor instead.
func (*UniversalSet) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{7}
}

type SubjectRestrictionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restrictions []*SubjectRestrictionSet_Restriction `protobuf:"bytes,1,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
}

func (x *SubjectRestrictionSet) Reset() {
	*x = SubjectRestrictionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectRestrictionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectRestrictionSet) ProtoMessage() {}

func (x *SubjectRestrictionSet) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectRestrictionSet.ProtoReflect.Descriptor instead.
func (*SubjectRestrictionSet) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{8}
}

func (x *SubjectRestrictionSet) GetRestrictions() []*SubjectRestrictionSet_Restriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

// RelationExpression models the runtime fetch intructions which the RelationGraph must follow.
type RelationExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//	*RelationExpression_Expr
	//	*RelationExpression_Tree
	Expression isRelationExpression_Expression `protobuf_oneof:"expression"`
}

func (x *RelationExpression) Reset() {
	*x = RelationExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationExpression) ProtoMessage() {}

func (x *RelationExpression) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationExpression.ProtoReflect.Descriptor instead.
func (*RelationExpression) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{9}
}

func (m *RelationExpression) GetExpression() isRelationExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *RelationExpression) GetExpr() string {
	if x, ok := x.GetExpression().(*RelationExpression_Expr); ok {
		return x.Expr
	}
	return ""
}

func (x *RelationExpression) GetTree() *RelationExpressionTree {
	if x, ok := x.GetExpression().(*RelationExpression_Tree); ok {
		return x.Tree
	}
	return nil
}

type isRelationExpression_Expression interface {
	isRelationExpression_Expression()
}

type RelationExpression_Expr struct {
	// expr represents a plain text RewriteExpression encoded according to
	// Zanzi's RelationExpression mini language
	Expr string `protobuf:"bytes,1,opt,name=expr,proto3,oneof"`
}

type RelationExpression_Tree struct {
	Tree *RelationExpressionTree `protobuf:"bytes,2,opt,name=tree,proto3,oneof"`
}

func (*RelationExpression_Expr) isRelationExpression_Expression() {}

func (*RelationExpression_Tree) isRelationExpression_Expression() {}

// Restriction is either an EntityRestriction or an EntitySetRestriction
type SubjectRestrictionSet_Restriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*SubjectRestrictionSet_Restriction_Entity
	//	*SubjectRestrictionSet_Restriction_EntitySet
	Entry isSubjectRestrictionSet_Restriction_Entry `protobuf_oneof:"entry"`
}

func (x *SubjectRestrictionSet_Restriction) Reset() {
	*x = SubjectRestrictionSet_Restriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectRestrictionSet_Restriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectRestrictionSet_Restriction) ProtoMessage() {}

func (x *SubjectRestrictionSet_Restriction) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectRestrictionSet_Restriction.ProtoReflect.Descriptor instead.
func (*SubjectRestrictionSet_Restriction) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_policy_proto_rawDescGZIP(), []int{8, 0}
}

func (m *SubjectRestrictionSet_Restriction) GetEntry() isSubjectRestrictionSet_Restriction_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SubjectRestrictionSet_Restriction) GetEntity() *EntityRestriction {
	if x, ok := x.GetEntry().(*SubjectRestrictionSet_Restriction_Entity); ok {
		return x.Entity
	}
	return nil
}

func (x *SubjectRestrictionSet_Restriction) GetEntitySet() *EntitySetRestriction {
	if x, ok := x.GetEntry().(*SubjectRestrictionSet_Restriction_EntitySet); ok {
		return x.EntitySet
	}
	return nil
}

type isSubjectRestrictionSet_Restriction_Entry interface {
	isSubjectRestrictionSet_Restriction_Entry()
}

type SubjectRestrictionSet_Restriction_Entity struct {
	Entity *EntityRestriction `protobuf:"bytes,1,opt,name=entity,proto3,oneof"`
}

type SubjectRestrictionSet_Restriction_EntitySet struct {
	EntitySet *EntitySetRestriction `protobuf:"bytes,2,opt,name=entity_set,json=entitySet,proto3,oneof"`
}

func (*SubjectRestrictionSet_Restriction_Entity) isSubjectRestrictionSet_Restriction_Entry() {}

func (*SubjectRestrictionSet_Restriction_EntitySet) isSubjectRestrictionSet_Restriction_Entry() {}

var File_zanzi_domain_policy_proto protoreflect.FileDescriptor

var file_zanzi_domain_policy_proto_rawDesc = []byte{
	0x0a, 0x19, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x42, 0x1c, 0x0a, 0x13, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x38, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x61,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a,
	0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x42, 0x0e, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x89, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x72, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zanzi_domain_policy_proto_rawDescOnce sync.Once
	file_zanzi_domain_policy_proto_rawDescData = file_zanzi_domain_policy_proto_rawDesc
)

func file_zanzi_domain_policy_proto_rawDescGZIP() []byte {
	file_zanzi_domain_policy_proto_rawDescOnce.Do(func() {
		file_zanzi_domain_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_zanzi_domain_policy_proto_rawDescData)
	})
	return file_zanzi_domain_policy_proto_rawDescData
}

var file_zanzi_domain_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_zanzi_domain_policy_proto_goTypes = []interface{}{
	(*Policy)(nil),                            // 0: sourcenetwork.zanzi.domain.Policy
	(*PolicyRecord)(nil),                      // 1: sourcenetwork.zanzi.domain.PolicyRecord
	(*Resource)(nil),                          // 2: sourcenetwork.zanzi.domain.Resource
	(*Relation)(nil),                          // 3: sourcenetwork.zanzi.domain.Relation
	(*SubjectRestriction)(nil),                // 4: sourcenetwork.zanzi.domain.SubjectRestriction
	(*EntityRestriction)(nil),                 // 5: sourcenetwork.zanzi.domain.EntityRestriction
	(*EntitySetRestriction)(nil),              // 6: sourcenetwork.zanzi.domain.EntitySetRestriction
	(*UniversalSet)(nil),                      // 7: sourcenetwork.zanzi.domain.UniversalSet
	(*SubjectRestrictionSet)(nil),             // 8: sourcenetwork.zanzi.domain.SubjectRestrictionSet
	(*RelationExpression)(nil),                // 9: sourcenetwork.zanzi.domain.RelationExpression
	nil,                                       // 10: sourcenetwork.zanzi.domain.Policy.AttributesEntry
	(*SubjectRestrictionSet_Restriction)(nil), // 11: sourcenetwork.zanzi.domain.SubjectRestrictionSet.Restriction
	(*timestamppb.Timestamp)(nil),             // 12: google.protobuf.Timestamp
	(*RelationExpressionTree)(nil),            // 13: sourcenetwork.zanzi.domain.RelationExpressionTree
}
var file_zanzi_domain_policy_proto_depIdxs = []int32{
	2,  // 0: sourcenetwork.zanzi.domain.Policy.resources:type_name -> sourcenetwork.zanzi.domain.Resource
	10, // 1: sourcenetwork.zanzi.domain.Policy.attributes:type_name -> sourcenetwork.zanzi.domain.Policy.AttributesEntry
	0,  // 2: sourcenetwork.zanzi.domain.PolicyRecord.policy:type_name -> sourcenetwork.zanzi.domain.Policy
	12, // 3: sourcenetwork.zanzi.domain.PolicyRecord.created_at:type_name -> google.protobuf.Timestamp
	3,  // 4: sourcenetwork.zanzi.domain.Resource.relations:type_name -> sourcenetwork.zanzi.domain.Relation
	9,  // 5: sourcenetwork.zanzi.domain.Relation.relation_expression:type_name -> sourcenetwork.zanzi.domain.RelationExpression
	4,  // 6: sourcenetwork.zanzi.domain.Relation.subject_restriction:type_name -> sourcenetwork.zanzi.domain.SubjectRestriction
	8,  // 7: sourcenetwork.zanzi.domain.SubjectRestriction.restriction_set:type_name -> sourcenetwork.zanzi.domain.SubjectRestrictionSet
	7,  // 8: sourcenetwork.zanzi.domain.SubjectRestriction.universal_set:type_name -> sourcenetwork.zanzi.domain.UniversalSet
	11, // 9: sourcenetwork.zanzi.domain.SubjectRestrictionSet.restrictions:type_name -> sourcenetwork.zanzi.domain.SubjectRestrictionSet.Restriction
	13, // 10: sourcenetwork.zanzi.domain.RelationExpression.tree:type_name -> sourcenetwork.zanzi.domain.RelationExpressionTree
	5,  // 11: sourcenetwork.zanzi.domain.SubjectRestrictionSet.Restriction.entity:type_name -> sourcenetwork.zanzi.domain.EntityRestriction
	6,  // 12: sourcenetwork.zanzi.domain.SubjectRestrictionSet.Restriction.entity_set:type_name -> sourcenetwork.zanzi.domain.EntitySetRestriction
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_zanzi_domain_policy_proto_init() }
func file_zanzi_domain_policy_proto_init() {
	if File_zanzi_domain_policy_proto != nil {
		return
	}
	file_zanzi_domain_relation_expression_tree_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zanzi_domain_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySetRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectRestrictionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectRestrictionSet_Restriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zanzi_domain_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SubjectRestriction_RestrictionSet)(nil),
		(*SubjectRestriction_UniversalSet)(nil),
	}
	file_zanzi_domain_policy_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*RelationExpression_Expr)(nil),
		(*RelationExpression_Tree)(nil),
	}
	file_zanzi_domain_policy_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SubjectRestrictionSet_Restriction_Entity)(nil),
		(*SubjectRestrictionSet_Restriction_EntitySet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zanzi_domain_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zanzi_domain_policy_proto_goTypes,
		DependencyIndexes: file_zanzi_domain_policy_proto_depIdxs,
		MessageInfos:      file_zanzi_domain_policy_proto_msgTypes,
	}.Build()
	File_zanzi_domain_policy_proto = out.File
	file_zanzi_domain_policy_proto_rawDesc = nil
	file_zanzi_domain_policy_proto_goTypes = nil
	file_zanzi_domain_policy_proto_depIdxs = nil
}
