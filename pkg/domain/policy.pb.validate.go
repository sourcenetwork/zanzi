// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zanzi/domain/policy.proto

package domain

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Attributes

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on PolicyRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyRecordMultiError, or
// nil if none found.
func (m *PolicyRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyRecordValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyRecordValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyRecordValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppData

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyRecordValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyRecordMultiError(errors)
	}

	return nil
}

// PolicyRecordMultiError is an error wrapping multiple validation errors
// returned by PolicyRecord.ValidateAll() if the designated constraints aren't met.
type PolicyRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRecordMultiError) AllErrors() []error { return m }

// PolicyRecordValidationError is the validation error returned by
// PolicyRecord.Validate if the designated constraints aren't met.
type PolicyRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRecordValidationError) ErrorName() string { return "PolicyRecordValidationError" }

// Error satisfies the builtin error interface
func (e PolicyRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRecordValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Relation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Relation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Relation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationMultiError, or nil
// if none found.
func (m *Relation) ValidateAll() error {
	return m.validate(true)
}

func (m *Relation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetRelationExpression()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationValidationError{
					field:  "RelationExpression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationValidationError{
					field:  "RelationExpression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationValidationError{
				field:  "RelationExpression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubjectRestriction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationValidationError{
					field:  "SubjectRestriction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationValidationError{
					field:  "SubjectRestriction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectRestriction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationValidationError{
				field:  "SubjectRestriction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationMultiError(errors)
	}

	return nil
}

// RelationMultiError is an error wrapping multiple validation errors returned
// by Relation.ValidateAll() if the designated constraints aren't met.
type RelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationMultiError) AllErrors() []error { return m }

// RelationValidationError is the validation error returned by
// Relation.Validate if the designated constraints aren't met.
type RelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationValidationError) ErrorName() string { return "RelationValidationError" }

// Error satisfies the builtin error interface
func (e RelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationValidationError{}

// Validate checks the field values on SubjectRestriction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubjectRestriction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectRestriction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectRestrictionMultiError, or nil if none found.
func (m *SubjectRestriction) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectRestriction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.SubjectRestriction.(type) {
	case *SubjectRestriction_RestrictionSet:
		if v == nil {
			err := SubjectRestrictionValidationError{
				field:  "SubjectRestriction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRestrictionSet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectRestrictionValidationError{
						field:  "RestrictionSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectRestrictionValidationError{
						field:  "RestrictionSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRestrictionSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectRestrictionValidationError{
					field:  "RestrictionSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubjectRestriction_UniversalSet:
		if v == nil {
			err := SubjectRestrictionValidationError{
				field:  "SubjectRestriction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUniversalSet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectRestrictionValidationError{
						field:  "UniversalSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectRestrictionValidationError{
						field:  "UniversalSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUniversalSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectRestrictionValidationError{
					field:  "UniversalSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SubjectRestrictionMultiError(errors)
	}

	return nil
}

// SubjectRestrictionMultiError is an error wrapping multiple validation errors
// returned by SubjectRestriction.ValidateAll() if the designated constraints
// aren't met.
type SubjectRestrictionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectRestrictionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectRestrictionMultiError) AllErrors() []error { return m }

// SubjectRestrictionValidationError is the validation error returned by
// SubjectRestriction.Validate if the designated constraints aren't met.
type SubjectRestrictionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectRestrictionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectRestrictionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectRestrictionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectRestrictionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectRestrictionValidationError) ErrorName() string {
	return "SubjectRestrictionValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectRestrictionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectRestriction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectRestrictionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectRestrictionValidationError{}

// Validate checks the field values on EntityRestriction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EntityRestriction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityRestriction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityRestrictionMultiError, or nil if none found.
func (m *EntityRestriction) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityRestriction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceName

	if len(errors) > 0 {
		return EntityRestrictionMultiError(errors)
	}

	return nil
}

// EntityRestrictionMultiError is an error wrapping multiple validation errors
// returned by EntityRestriction.ValidateAll() if the designated constraints
// aren't met.
type EntityRestrictionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityRestrictionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityRestrictionMultiError) AllErrors() []error { return m }

// EntityRestrictionValidationError is the validation error returned by
// EntityRestriction.Validate if the designated constraints aren't met.
type EntityRestrictionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityRestrictionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityRestrictionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityRestrictionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityRestrictionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityRestrictionValidationError) ErrorName() string {
	return "EntityRestrictionValidationError"
}

// Error satisfies the builtin error interface
func (e EntityRestrictionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityRestriction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityRestrictionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityRestrictionValidationError{}

// Validate checks the field values on EntitySetRestriction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntitySetRestriction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitySetRestriction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitySetRestrictionMultiError, or nil if none found.
func (m *EntitySetRestriction) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitySetRestriction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceName

	// no validation rules for RelationName

	if len(errors) > 0 {
		return EntitySetRestrictionMultiError(errors)
	}

	return nil
}

// EntitySetRestrictionMultiError is an error wrapping multiple validation
// errors returned by EntitySetRestriction.ValidateAll() if the designated
// constraints aren't met.
type EntitySetRestrictionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitySetRestrictionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitySetRestrictionMultiError) AllErrors() []error { return m }

// EntitySetRestrictionValidationError is the validation error returned by
// EntitySetRestriction.Validate if the designated constraints aren't met.
type EntitySetRestrictionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitySetRestrictionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitySetRestrictionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitySetRestrictionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitySetRestrictionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitySetRestrictionValidationError) ErrorName() string {
	return "EntitySetRestrictionValidationError"
}

// Error satisfies the builtin error interface
func (e EntitySetRestrictionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitySetRestriction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitySetRestrictionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitySetRestrictionValidationError{}

// Validate checks the field values on UniversalSet with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UniversalSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UniversalSet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UniversalSetMultiError, or
// nil if none found.
func (m *UniversalSet) ValidateAll() error {
	return m.validate(true)
}

func (m *UniversalSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UniversalSetMultiError(errors)
	}

	return nil
}

// UniversalSetMultiError is an error wrapping multiple validation errors
// returned by UniversalSet.ValidateAll() if the designated constraints aren't met.
type UniversalSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UniversalSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UniversalSetMultiError) AllErrors() []error { return m }

// UniversalSetValidationError is the validation error returned by
// UniversalSet.Validate if the designated constraints aren't met.
type UniversalSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UniversalSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UniversalSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UniversalSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UniversalSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UniversalSetValidationError) ErrorName() string { return "UniversalSetValidationError" }

// Error satisfies the builtin error interface
func (e UniversalSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUniversalSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UniversalSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UniversalSetValidationError{}

// Validate checks the field values on SubjectRestrictionSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubjectRestrictionSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectRestrictionSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectRestrictionSetMultiError, or nil if none found.
func (m *SubjectRestrictionSet) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectRestrictionSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRestrictions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectRestrictionSetValidationError{
						field:  fmt.Sprintf("Restrictions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectRestrictionSetValidationError{
						field:  fmt.Sprintf("Restrictions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectRestrictionSetValidationError{
					field:  fmt.Sprintf("Restrictions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubjectRestrictionSetMultiError(errors)
	}

	return nil
}

// SubjectRestrictionSetMultiError is an error wrapping multiple validation
// errors returned by SubjectRestrictionSet.ValidateAll() if the designated
// constraints aren't met.
type SubjectRestrictionSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectRestrictionSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectRestrictionSetMultiError) AllErrors() []error { return m }

// SubjectRestrictionSetValidationError is the validation error returned by
// SubjectRestrictionSet.Validate if the designated constraints aren't met.
type SubjectRestrictionSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectRestrictionSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectRestrictionSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectRestrictionSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectRestrictionSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectRestrictionSetValidationError) ErrorName() string {
	return "SubjectRestrictionSetValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectRestrictionSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectRestrictionSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectRestrictionSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectRestrictionSetValidationError{}

// Validate checks the field values on RelationExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationExpression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationExpressionMultiError, or nil if none found.
func (m *RelationExpression) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationExpression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Expression.(type) {
	case *RelationExpression_Expr:
		if v == nil {
			err := RelationExpressionValidationError{
				field:  "Expression",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Expr
	case *RelationExpression_Tree:
		if v == nil {
			err := RelationExpressionValidationError{
				field:  "Expression",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTree()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationExpressionValidationError{
						field:  "Tree",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationExpressionValidationError{
						field:  "Tree",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTree()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationExpressionValidationError{
					field:  "Tree",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RelationExpressionMultiError(errors)
	}

	return nil
}

// RelationExpressionMultiError is an error wrapping multiple validation errors
// returned by RelationExpression.ValidateAll() if the designated constraints
// aren't met.
type RelationExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationExpressionMultiError) AllErrors() []error { return m }

// RelationExpressionValidationError is the validation error returned by
// RelationExpression.Validate if the designated constraints aren't met.
type RelationExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationExpressionValidationError) ErrorName() string {
	return "RelationExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e RelationExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationExpressionValidationError{}

// Validate checks the field values on SubjectRestrictionSet_Restriction with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubjectRestrictionSet_Restriction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectRestrictionSet_Restriction
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubjectRestrictionSet_RestrictionMultiError, or nil if none found.
func (m *SubjectRestrictionSet_Restriction) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectRestrictionSet_Restriction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Entry.(type) {
	case *SubjectRestrictionSet_Restriction_Entity:
		if v == nil {
			err := SubjectRestrictionSet_RestrictionValidationError{
				field:  "Entry",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEntity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectRestrictionSet_RestrictionValidationError{
						field:  "Entity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectRestrictionSet_RestrictionValidationError{
						field:  "Entity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectRestrictionSet_RestrictionValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubjectRestrictionSet_Restriction_EntitySet:
		if v == nil {
			err := SubjectRestrictionSet_RestrictionValidationError{
				field:  "Entry",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEntitySet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectRestrictionSet_RestrictionValidationError{
						field:  "EntitySet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectRestrictionSet_RestrictionValidationError{
						field:  "EntitySet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEntitySet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectRestrictionSet_RestrictionValidationError{
					field:  "EntitySet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SubjectRestrictionSet_RestrictionMultiError(errors)
	}

	return nil
}

// SubjectRestrictionSet_RestrictionMultiError is an error wrapping multiple
// validation errors returned by
// SubjectRestrictionSet_Restriction.ValidateAll() if the designated
// constraints aren't met.
type SubjectRestrictionSet_RestrictionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectRestrictionSet_RestrictionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectRestrictionSet_RestrictionMultiError) AllErrors() []error { return m }

// SubjectRestrictionSet_RestrictionValidationError is the validation error
// returned by SubjectRestrictionSet_Restriction.Validate if the designated
// constraints aren't met.
type SubjectRestrictionSet_RestrictionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectRestrictionSet_RestrictionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectRestrictionSet_RestrictionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectRestrictionSet_RestrictionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectRestrictionSet_RestrictionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectRestrictionSet_RestrictionValidationError) ErrorName() string {
	return "SubjectRestrictionSet_RestrictionValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectRestrictionSet_RestrictionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectRestrictionSet_Restriction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectRestrictionSet_RestrictionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectRestrictionSet_RestrictionValidationError{}
