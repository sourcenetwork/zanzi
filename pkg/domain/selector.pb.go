// selector.proto defines types for specifying sets of relationships

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: zanzi/domain/selector.proto

package domain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RelationshipSelector is a structured representation for a set of relationships.
type RelationshipSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectSelector   *ObjectSelector   `protobuf:"bytes,1,opt,name=object_selector,json=objectSelector,proto3" json:"object_selector,omitempty"`
	RelationSelector *RelationSelector `protobuf:"bytes,2,opt,name=relation_selector,json=relationSelector,proto3" json:"relation_selector,omitempty"`
	SubjectSelector  *SubjectSelector  `protobuf:"bytes,3,opt,name=subject_selector,json=subjectSelector,proto3" json:"subject_selector,omitempty"`
}

func (x *RelationshipSelector) Reset() {
	*x = RelationshipSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_selector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationshipSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipSelector) ProtoMessage() {}

func (x *RelationshipSelector) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_selector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipSelector.ProtoReflect.Descriptor instead.
func (*RelationshipSelector) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_selector_proto_rawDescGZIP(), []int{0}
}

func (x *RelationshipSelector) GetObjectSelector() *ObjectSelector {
	if x != nil {
		return x.ObjectSelector
	}
	return nil
}

func (x *RelationshipSelector) GetRelationSelector() *RelationSelector {
	if x != nil {
		return x.RelationSelector
	}
	return nil
}

func (x *RelationshipSelector) GetSubjectSelector() *SubjectSelector {
	if x != nil {
		return x.SubjectSelector
	}
	return nil
}

// RelationNodeSelector is a structured representation for a set of RelationNodes.
type RelationNodeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectSelector   *ObjectSelector   `protobuf:"bytes,1,opt,name=object_selector,json=objectSelector,proto3" json:"object_selector,omitempty"`
	RelationSelector *RelationSelector `protobuf:"bytes,2,opt,name=relation_selector,json=relationSelector,proto3" json:"relation_selector,omitempty"`
}

func (x *RelationNodeSelector) Reset() {
	*x = RelationNodeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_selector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationNodeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationNodeSelector) ProtoMessage() {}

func (x *RelationNodeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_selector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationNodeSelector.ProtoReflect.Descriptor instead.
func (*RelationNodeSelector) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_selector_proto_rawDescGZIP(), []int{1}
}

func (x *RelationNodeSelector) GetObjectSelector() *ObjectSelector {
	if x != nil {
		return x.ObjectSelector
	}
	return nil
}

func (x *RelationNodeSelector) GetRelationSelector() *RelationSelector {
	if x != nil {
		return x.RelationSelector
	}
	return nil
}

// ObjectSelector models a notation to represent a set of Objects
type ObjectSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//	*ObjectSelector_ObjectSpec
	//	*ObjectSelector_Wildcard
	//	*ObjectSelector_ResourceSpec
	Selector isObjectSelector_Selector `protobuf_oneof:"selector"`
}

func (x *ObjectSelector) Reset() {
	*x = ObjectSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_selector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSelector) ProtoMessage() {}

func (x *ObjectSelector) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_selector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSelector.ProtoReflect.Descriptor instead.
func (*ObjectSelector) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_selector_proto_rawDescGZIP(), []int{2}
}

func (m *ObjectSelector) GetSelector() isObjectSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *ObjectSelector) GetObjectSpec() *Entity {
	if x, ok := x.GetSelector().(*ObjectSelector_ObjectSpec); ok {
		return x.ObjectSpec
	}
	return nil
}

func (x *ObjectSelector) GetWildcard() *WildcardSelector {
	if x, ok := x.GetSelector().(*ObjectSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (x *ObjectSelector) GetResourceSpec() string {
	if x, ok := x.GetSelector().(*ObjectSelector_ResourceSpec); ok {
		return x.ResourceSpec
	}
	return ""
}

type isObjectSelector_Selector interface {
	isObjectSelector_Selector()
}

type ObjectSelector_ObjectSpec struct {
	// object_spec is used to specify the single object which the selector represents.
	ObjectSpec *Entity `protobuf:"bytes,1,opt,name=object_spec,json=objectSpec,proto3,oneof"`
}

type ObjectSelector_Wildcard struct {
	// wilcard represents that all object are included in the selector.
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof"`
}

type ObjectSelector_ResourceSpec struct {
	// resoruce_spec represents that all objects in a resource are included in the selector.
	ResourceSpec string `protobuf:"bytes,3,opt,name=resource_spec,json=resourceSpec,proto3,oneof"`
}

func (*ObjectSelector_ObjectSpec) isObjectSelector_Selector() {}

func (*ObjectSelector_Wildcard) isObjectSelector_Selector() {}

func (*ObjectSelector_ResourceSpec) isObjectSelector_Selector() {}

// RelationSelector models a notation to represent a set of Relations
type RelationSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//	*RelationSelector_RelationName
	//	*RelationSelector_Wildcard
	Selector isRelationSelector_Selector `protobuf_oneof:"selector"`
}

func (x *RelationSelector) Reset() {
	*x = RelationSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_selector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationSelector) ProtoMessage() {}

func (x *RelationSelector) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_selector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationSelector.ProtoReflect.Descriptor instead.
func (*RelationSelector) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_selector_proto_rawDescGZIP(), []int{3}
}

func (m *RelationSelector) GetSelector() isRelationSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *RelationSelector) GetRelationName() string {
	if x, ok := x.GetSelector().(*RelationSelector_RelationName); ok {
		return x.RelationName
	}
	return ""
}

func (x *RelationSelector) GetWildcard() *WildcardSelector {
	if x, ok := x.GetSelector().(*RelationSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

type isRelationSelector_Selector interface {
	isRelationSelector_Selector()
}

type RelationSelector_RelationName struct {
	// relation_name specifies a single relation which the selector represents.
	// case sensitive string comparasion is used in the matching.
	RelationName string `protobuf:"bytes,1,opt,name=relation_name,json=relationName,proto3,oneof"`
}

type RelationSelector_Wildcard struct {
	// wildcard specifies that all relations are part of the selector.
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof"`
}

func (*RelationSelector_RelationName) isRelationSelector_Selector() {}

func (*RelationSelector_Wildcard) isRelationSelector_Selector() {}

// SubjectSelector models a notation to represent a set of Subjects.
type SubjectSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//	*SubjectSelector_SubjectSpec
	//	*SubjectSelector_Wildcard
	//	*SubjectSelector_ResourceSpec
	Selector isSubjectSelector_Selector `protobuf_oneof:"selector"`
}

func (x *SubjectSelector) Reset() {
	*x = SubjectSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_selector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectSelector) ProtoMessage() {}

func (x *SubjectSelector) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_selector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectSelector.ProtoReflect.Descriptor instead.
func (*SubjectSelector) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_selector_proto_rawDescGZIP(), []int{4}
}

func (m *SubjectSelector) GetSelector() isSubjectSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *SubjectSelector) GetSubjectSpec() *Subject {
	if x, ok := x.GetSelector().(*SubjectSelector_SubjectSpec); ok {
		return x.SubjectSpec
	}
	return nil
}

func (x *SubjectSelector) GetWildcard() *WildcardSelector {
	if x, ok := x.GetSelector().(*SubjectSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (x *SubjectSelector) GetResourceSpec() string {
	if x, ok := x.GetSelector().(*SubjectSelector_ResourceSpec); ok {
		return x.ResourceSpec
	}
	return ""
}

type isSubjectSelector_Selector interface {
	isSubjectSelector_Selector()
}

type SubjectSelector_SubjectSpec struct {
	// subject_spec represents a single subject which the selector represents.
	SubjectSpec *Subject `protobuf:"bytes,1,opt,name=subject_spec,json=subjectSpec,proto3,oneof"`
}

type SubjectSelector_Wildcard struct {
	// wildcard specifies that all subjects are part of the selector.
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof"`
}

type SubjectSelector_ResourceSpec struct {
	// resoruce_spec represents that all entities in a resource are included in the selector.
	ResourceSpec string `protobuf:"bytes,3,opt,name=resource_spec,json=resourceSpec,proto3,oneof"`
}

func (*SubjectSelector_SubjectSpec) isSubjectSelector_Selector() {}

func (*SubjectSelector_Wildcard) isSubjectSelector_Selector() {}

func (*SubjectSelector_ResourceSpec) isSubjectSelector_Selector() {}

// WildcardSelector represents all entities within a set.
type WildcardSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WildcardSelector) Reset() {
	*x = WildcardSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_selector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildcardSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildcardSelector) ProtoMessage() {}

func (x *WildcardSelector) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_selector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildcardSelector.ProtoReflect.Descriptor instead.
func (*WildcardSelector) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_selector_proto_rawDescGZIP(), []int{5}
}

var File_zanzi_domain_selector_proto protoreflect.FileDescriptor

var file_zanzi_domain_selector_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x7a, 0x61, 0x6e, 0x7a,
	0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x53, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x56, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x53, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x08, 0x77, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0a, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xda, 0x01,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x08, 0x77,
	0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61,
	0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x77,
	0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x57, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x2b,
	0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x7a, 0x61, 0x6e, 0x7a, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zanzi_domain_selector_proto_rawDescOnce sync.Once
	file_zanzi_domain_selector_proto_rawDescData = file_zanzi_domain_selector_proto_rawDesc
)

func file_zanzi_domain_selector_proto_rawDescGZIP() []byte {
	file_zanzi_domain_selector_proto_rawDescOnce.Do(func() {
		file_zanzi_domain_selector_proto_rawDescData = protoimpl.X.CompressGZIP(file_zanzi_domain_selector_proto_rawDescData)
	})
	return file_zanzi_domain_selector_proto_rawDescData
}

var file_zanzi_domain_selector_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_zanzi_domain_selector_proto_goTypes = []interface{}{
	(*RelationshipSelector)(nil), // 0: sourcenetwork.zanzi.domain.RelationshipSelector
	(*RelationNodeSelector)(nil), // 1: sourcenetwork.zanzi.domain.RelationNodeSelector
	(*ObjectSelector)(nil),       // 2: sourcenetwork.zanzi.domain.ObjectSelector
	(*RelationSelector)(nil),     // 3: sourcenetwork.zanzi.domain.RelationSelector
	(*SubjectSelector)(nil),      // 4: sourcenetwork.zanzi.domain.SubjectSelector
	(*WildcardSelector)(nil),     // 5: sourcenetwork.zanzi.domain.WildcardSelector
	(*Entity)(nil),               // 6: sourcenetwork.zanzi.domain.Entity
	(*Subject)(nil),              // 7: sourcenetwork.zanzi.domain.Subject
}
var file_zanzi_domain_selector_proto_depIdxs = []int32{
	2,  // 0: sourcenetwork.zanzi.domain.RelationshipSelector.object_selector:type_name -> sourcenetwork.zanzi.domain.ObjectSelector
	3,  // 1: sourcenetwork.zanzi.domain.RelationshipSelector.relation_selector:type_name -> sourcenetwork.zanzi.domain.RelationSelector
	4,  // 2: sourcenetwork.zanzi.domain.RelationshipSelector.subject_selector:type_name -> sourcenetwork.zanzi.domain.SubjectSelector
	2,  // 3: sourcenetwork.zanzi.domain.RelationNodeSelector.object_selector:type_name -> sourcenetwork.zanzi.domain.ObjectSelector
	3,  // 4: sourcenetwork.zanzi.domain.RelationNodeSelector.relation_selector:type_name -> sourcenetwork.zanzi.domain.RelationSelector
	6,  // 5: sourcenetwork.zanzi.domain.ObjectSelector.object_spec:type_name -> sourcenetwork.zanzi.domain.Entity
	5,  // 6: sourcenetwork.zanzi.domain.ObjectSelector.wildcard:type_name -> sourcenetwork.zanzi.domain.WildcardSelector
	5,  // 7: sourcenetwork.zanzi.domain.RelationSelector.wildcard:type_name -> sourcenetwork.zanzi.domain.WildcardSelector
	7,  // 8: sourcenetwork.zanzi.domain.SubjectSelector.subject_spec:type_name -> sourcenetwork.zanzi.domain.Subject
	5,  // 9: sourcenetwork.zanzi.domain.SubjectSelector.wildcard:type_name -> sourcenetwork.zanzi.domain.WildcardSelector
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_zanzi_domain_selector_proto_init() }
func file_zanzi_domain_selector_proto_init() {
	if File_zanzi_domain_selector_proto != nil {
		return
	}
	file_zanzi_domain_policy_proto_init()
	file_zanzi_domain_relationship_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zanzi_domain_selector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationshipSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_selector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationNodeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_selector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_selector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_selector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_selector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildcardSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zanzi_domain_selector_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ObjectSelector_ObjectSpec)(nil),
		(*ObjectSelector_Wildcard)(nil),
		(*ObjectSelector_ResourceSpec)(nil),
	}
	file_zanzi_domain_selector_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RelationSelector_RelationName)(nil),
		(*RelationSelector_Wildcard)(nil),
	}
	file_zanzi_domain_selector_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SubjectSelector_SubjectSpec)(nil),
		(*SubjectSelector_Wildcard)(nil),
		(*SubjectSelector_ResourceSpec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zanzi_domain_selector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zanzi_domain_selector_proto_goTypes,
		DependencyIndexes: file_zanzi_domain_selector_proto_depIdxs,
		MessageInfos:      file_zanzi_domain_selector_proto_msgTypes,
	}.Build()
	File_zanzi_domain_selector_proto = out.File
	file_zanzi_domain_selector_proto_rawDesc = nil
	file_zanzi_domain_selector_proto_goTypes = nil
	file_zanzi_domain_selector_proto_depIdxs = nil
}
