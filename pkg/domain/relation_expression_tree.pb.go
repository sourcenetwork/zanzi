// relation_expression_tree.proto defines the Relation Expression Tree types.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: zanzi/domain/relation_expression_tree.proto

package domain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator int32

const (
	Operator_UNION        Operator = 0
	Operator_INTERSECTION Operator = 1
	Operator_DIFFERENCE   Operator = 2
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "UNION",
		1: "INTERSECTION",
		2: "DIFFERENCE",
	}
	Operator_value = map[string]int32{
		"UNION":        0,
		"INTERSECTION": 1,
		"DIFFERENCE":   2,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_zanzi_domain_relation_expression_tree_proto_enumTypes[0].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_zanzi_domain_relation_expression_tree_proto_enumTypes[0]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{0}
}

// RelationExpressionTree defines the root of the
// relation expression mini language
type RelationExpressionTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//	*RelationExpressionTree_OpNode
	//	*RelationExpressionTree_Rule
	Node isRelationExpressionTree_Node `protobuf_oneof:"node"`
}

func (x *RelationExpressionTree) Reset() {
	*x = RelationExpressionTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationExpressionTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationExpressionTree) ProtoMessage() {}

func (x *RelationExpressionTree) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationExpressionTree.ProtoReflect.Descriptor instead.
func (*RelationExpressionTree) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{0}
}

func (m *RelationExpressionTree) GetNode() isRelationExpressionTree_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *RelationExpressionTree) GetOpNode() *OpNode {
	if x, ok := x.GetNode().(*RelationExpressionTree_OpNode); ok {
		return x.OpNode
	}
	return nil
}

func (x *RelationExpressionTree) GetRule() *Rule {
	if x, ok := x.GetNode().(*RelationExpressionTree_Rule); ok {
		return x.Rule
	}
	return nil
}

type isRelationExpressionTree_Node interface {
	isRelationExpressionTree_Node()
}

type RelationExpressionTree_OpNode struct {
	OpNode *OpNode `protobuf:"bytes,1,opt,name=op_node,json=opNode,proto3,oneof"`
}

type RelationExpressionTree_Rule struct {
	Rule *Rule `protobuf:"bytes,2,opt,name=rule,proto3,oneof"`
}

func (*RelationExpressionTree_OpNode) isRelationExpressionTree_Node() {}

func (*RelationExpressionTree_Rule) isRelationExpressionTree_Node() {}

type OpNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left     *RelationExpressionTree `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Operator Operator                `protobuf:"varint,2,opt,name=operator,proto3,enum=sourcenetwork.zanzi.domain.Operator" json:"operator,omitempty"`
	Right    *RelationExpressionTree `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *OpNode) Reset() {
	*x = OpNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpNode) ProtoMessage() {}

func (x *OpNode) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpNode.ProtoReflect.Descriptor instead.
func (*OpNode) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{1}
}

func (x *OpNode) GetLeft() *RelationExpressionTree {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *OpNode) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_UNION
}

func (x *OpNode) GetRight() *RelationExpressionTree {
	if x != nil {
		return x.Right
	}
	return nil
}

// Rule expresses the possible Rewrite rules of the system.
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//	*Rule_This
	//	*Rule_Cu
	//	*Rule_Ttu
	Rule isRule_Rule `protobuf_oneof:"rule"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{2}
}

func (m *Rule) GetRule() isRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *Rule) GetThis() *This {
	if x, ok := x.GetRule().(*Rule_This); ok {
		return x.This
	}
	return nil
}

func (x *Rule) GetCu() *ComputedUserset {
	if x, ok := x.GetRule().(*Rule_Cu); ok {
		return x.Cu
	}
	return nil
}

func (x *Rule) GetTtu() *TupleToUserset {
	if x, ok := x.GetRule().(*Rule_Ttu); ok {
		return x.Ttu
	}
	return nil
}

type isRule_Rule interface {
	isRule_Rule()
}

type Rule_This struct {
	This *This `protobuf:"bytes,1,opt,name=this,proto3,oneof"`
}

type Rule_Cu struct {
	Cu *ComputedUserset `protobuf:"bytes,2,opt,name=cu,proto3,oneof"`
}

type Rule_Ttu struct {
	Ttu *TupleToUserset `protobuf:"bytes,3,opt,name=ttu,proto3,oneof"`
}

func (*Rule_This) isRule_Rule() {}

func (*Rule_Cu) isRule_Rule() {}

func (*Rule_Ttu) isRule_Rule() {}

// This specifies a Rule which returns all sucessors for the given (object, relation) pair.
type This struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *This) Reset() {
	*x = This{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *This) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*This) ProtoMessage() {}

func (x *This) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use This.ProtoReflect.Descriptor instead.
func (*This) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{3}
}

// ComputedUsersetRule specifies a rule which creates a RelationNode with the object actively being fetched.
// Computed Usersets are used to model a inheritance, such that one relation implies the existence of another.
type ComputedUserset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the relation used in the built TupleNode.
	TargetRelation string `protobuf:"bytes,1,opt,name=target_relation,json=targetRelation,proto3" json:"target_relation,omitempty"`
}

func (x *ComputedUserset) Reset() {
	*x = ComputedUserset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedUserset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedUserset) ProtoMessage() {}

func (x *ComputedUserset) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedUserset.ProtoReflect.Descriptor instead.
func (*ComputedUserset) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{4}
}

func (x *ComputedUserset) GetTargetRelation() string {
	if x != nil {
		return x.TargetRelation
	}
	return ""
}

// TupleToUserset is rule which is used to traverse hierarchical relations.
// For a given object `obj` it works as follows:
// 1. Fetch the direct neighbors of the (`obj`, tupleset_relation) pair
// 2. For each fetched tuple `tf`, create a computed userset of (tf.Namespace, tf.ObjId, cu_relation)
//
// Example:
// Let tuplset_relation = "parent"
// Let cu_relation = "owner"
// Let the input object be "doc:readme"
// TupleToUserset would then:
//  1. Lookup all tuples matching (obj="doc:readme", relation="parent").
//     Assume the matching tuples are [(obj="doc:readme", relation="parent", user=(id="dir:root", relation="..."))]
//  2. For each found tuple, it would compute the userset (obj=${result_tuple_userset_obj}, relation=cu_relation)
//
// The result for this example would be the userset: (obj="dir:root", relation="owner")
type TupleToUserset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tupleset_relation used in the built RelationNode whose sucessors are
	// going to be fetched.
	TuplesetRelation string `protobuf:"bytes,1,opt,name=tupleset_relation,json=tuplesetRelation,proto3" json:"tupleset_relation,omitempty"`
	// computed_userset_relation specifies the relation which will be used in to rewrite the
	// fetched RelationNodes.
	ComputedUsersetRelation string `protobuf:"bytes,2,opt,name=computed_userset_relation,json=computedUsersetRelation,proto3" json:"computed_userset_relation,omitempty"`
}

func (x *TupleToUserset) Reset() {
	*x = TupleToUserset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleToUserset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleToUserset) ProtoMessage() {}

func (x *TupleToUserset) ProtoReflect() protoreflect.Message {
	mi := &file_zanzi_domain_relation_expression_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleToUserset.ProtoReflect.Descriptor instead.
func (*TupleToUserset) Descriptor() ([]byte, []int) {
	return file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP(), []int{5}
}

func (x *TupleToUserset) GetTuplesetRelation() string {
	if x != nil {
		return x.TuplesetRelation
	}
	return ""
}

func (x *TupleToUserset) GetComputedUsersetRelation() string {
	if x != nil {
		return x.ComputedUsersetRelation
	}
	return ""
}

var File_zanzi_domain_relation_expression_tree_proto protoreflect.FileDescriptor

var file_zanzi_domain_relation_expression_tree_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e,
	0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x68, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x68, 0x69, 0x73, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x68, 0x69, 0x73, 0x12, 0x3d, 0x0a, 0x02, 0x63, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x02,
	0x63, 0x75, 0x12, 0x3e, 0x0a, 0x03, 0x74, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x7a, 0x61, 0x6e, 0x7a, 0x69, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x74,
	0x74, 0x75, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x54, 0x68,
	0x69, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79,
	0x0a, 0x0e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x37, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x02, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x7a,
	0x61, 0x6e, 0x7a, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zanzi_domain_relation_expression_tree_proto_rawDescOnce sync.Once
	file_zanzi_domain_relation_expression_tree_proto_rawDescData = file_zanzi_domain_relation_expression_tree_proto_rawDesc
)

func file_zanzi_domain_relation_expression_tree_proto_rawDescGZIP() []byte {
	file_zanzi_domain_relation_expression_tree_proto_rawDescOnce.Do(func() {
		file_zanzi_domain_relation_expression_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_zanzi_domain_relation_expression_tree_proto_rawDescData)
	})
	return file_zanzi_domain_relation_expression_tree_proto_rawDescData
}

var file_zanzi_domain_relation_expression_tree_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zanzi_domain_relation_expression_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_zanzi_domain_relation_expression_tree_proto_goTypes = []interface{}{
	(Operator)(0),                  // 0: sourcenetwork.zanzi.domain.Operator
	(*RelationExpressionTree)(nil), // 1: sourcenetwork.zanzi.domain.RelationExpressionTree
	(*OpNode)(nil),                 // 2: sourcenetwork.zanzi.domain.OpNode
	(*Rule)(nil),                   // 3: sourcenetwork.zanzi.domain.Rule
	(*This)(nil),                   // 4: sourcenetwork.zanzi.domain.This
	(*ComputedUserset)(nil),        // 5: sourcenetwork.zanzi.domain.ComputedUserset
	(*TupleToUserset)(nil),         // 6: sourcenetwork.zanzi.domain.TupleToUserset
}
var file_zanzi_domain_relation_expression_tree_proto_depIdxs = []int32{
	2, // 0: sourcenetwork.zanzi.domain.RelationExpressionTree.op_node:type_name -> sourcenetwork.zanzi.domain.OpNode
	3, // 1: sourcenetwork.zanzi.domain.RelationExpressionTree.rule:type_name -> sourcenetwork.zanzi.domain.Rule
	1, // 2: sourcenetwork.zanzi.domain.OpNode.left:type_name -> sourcenetwork.zanzi.domain.RelationExpressionTree
	0, // 3: sourcenetwork.zanzi.domain.OpNode.operator:type_name -> sourcenetwork.zanzi.domain.Operator
	1, // 4: sourcenetwork.zanzi.domain.OpNode.right:type_name -> sourcenetwork.zanzi.domain.RelationExpressionTree
	4, // 5: sourcenetwork.zanzi.domain.Rule.this:type_name -> sourcenetwork.zanzi.domain.This
	5, // 6: sourcenetwork.zanzi.domain.Rule.cu:type_name -> sourcenetwork.zanzi.domain.ComputedUserset
	6, // 7: sourcenetwork.zanzi.domain.Rule.ttu:type_name -> sourcenetwork.zanzi.domain.TupleToUserset
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_zanzi_domain_relation_expression_tree_proto_init() }
func file_zanzi_domain_relation_expression_tree_proto_init() {
	if File_zanzi_domain_relation_expression_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zanzi_domain_relation_expression_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationExpressionTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_relation_expression_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_relation_expression_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_relation_expression_tree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*This); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_relation_expression_tree_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedUserset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zanzi_domain_relation_expression_tree_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleToUserset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zanzi_domain_relation_expression_tree_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RelationExpressionTree_OpNode)(nil),
		(*RelationExpressionTree_Rule)(nil),
	}
	file_zanzi_domain_relation_expression_tree_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Rule_This)(nil),
		(*Rule_Cu)(nil),
		(*Rule_Ttu)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zanzi_domain_relation_expression_tree_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zanzi_domain_relation_expression_tree_proto_goTypes,
		DependencyIndexes: file_zanzi_domain_relation_expression_tree_proto_depIdxs,
		EnumInfos:         file_zanzi_domain_relation_expression_tree_proto_enumTypes,
		MessageInfos:      file_zanzi_domain_relation_expression_tree_proto_msgTypes,
	}.Build()
	File_zanzi_domain_relation_expression_tree_proto = out.File
	file_zanzi_domain_relation_expression_tree_proto_rawDesc = nil
	file_zanzi_domain_relation_expression_tree_proto_goTypes = nil
	file_zanzi_domain_relation_expression_tree_proto_depIdxs = nil
}
