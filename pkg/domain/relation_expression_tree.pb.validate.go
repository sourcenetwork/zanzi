// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zanzi/domain/relation_expression_tree.proto

package domain

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RelationExpressionTree with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationExpressionTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationExpressionTree with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationExpressionTreeMultiError, or nil if none found.
func (m *RelationExpressionTree) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationExpressionTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Node.(type) {
	case *RelationExpressionTree_OpNode:
		if v == nil {
			err := RelationExpressionTreeValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOpNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationExpressionTreeValidationError{
						field:  "OpNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationExpressionTreeValidationError{
						field:  "OpNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationExpressionTreeValidationError{
					field:  "OpNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RelationExpressionTree_Rule:
		if v == nil {
			err := RelationExpressionTreeValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRule()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationExpressionTreeValidationError{
						field:  "Rule",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationExpressionTreeValidationError{
						field:  "Rule",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationExpressionTreeValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RelationExpressionTreeMultiError(errors)
	}

	return nil
}

// RelationExpressionTreeMultiError is an error wrapping multiple validation
// errors returned by RelationExpressionTree.ValidateAll() if the designated
// constraints aren't met.
type RelationExpressionTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationExpressionTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationExpressionTreeMultiError) AllErrors() []error { return m }

// RelationExpressionTreeValidationError is the validation error returned by
// RelationExpressionTree.Validate if the designated constraints aren't met.
type RelationExpressionTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationExpressionTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationExpressionTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationExpressionTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationExpressionTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationExpressionTreeValidationError) ErrorName() string {
	return "RelationExpressionTreeValidationError"
}

// Error satisfies the builtin error interface
func (e RelationExpressionTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationExpressionTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationExpressionTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationExpressionTreeValidationError{}

// Validate checks the field values on OpNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpNode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpNodeMultiError, or nil if none found.
func (m *OpNode) ValidateAll() error {
	return m.validate(true)
}

func (m *OpNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLeft()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Left",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Left",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeft()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpNodeValidationError{
				field:  "Left",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetRight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Right",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpNodeValidationError{
					field:  "Right",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpNodeValidationError{
				field:  "Right",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpNodeMultiError(errors)
	}

	return nil
}

// OpNodeMultiError is an error wrapping multiple validation errors returned by
// OpNode.ValidateAll() if the designated constraints aren't met.
type OpNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpNodeMultiError) AllErrors() []error { return m }

// OpNodeValidationError is the validation error returned by OpNode.Validate if
// the designated constraints aren't met.
type OpNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpNodeValidationError) ErrorName() string { return "OpNodeValidationError" }

// Error satisfies the builtin error interface
func (e OpNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpNodeValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Rule.(type) {
	case *Rule_This:
		if v == nil {
			err := RuleValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetThis()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  "This",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  "This",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetThis()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  "This",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Rule_Cu:
		if v == nil {
			err := RuleValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  "Cu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  "Cu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  "Cu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Rule_Ttu:
		if v == nil {
			err := RuleValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTtu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  "Ttu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  "Ttu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTtu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  "Ttu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on This with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *This) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on This with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThisMultiError, or nil if none found.
func (m *This) ValidateAll() error {
	return m.validate(true)
}

func (m *This) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ThisMultiError(errors)
	}

	return nil
}

// ThisMultiError is an error wrapping multiple validation errors returned by
// This.ValidateAll() if the designated constraints aren't met.
type ThisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThisMultiError) AllErrors() []error { return m }

// ThisValidationError is the validation error returned by This.Validate if the
// designated constraints aren't met.
type ThisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThisValidationError) ErrorName() string { return "ThisValidationError" }

// Error satisfies the builtin error interface
func (e ThisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThisValidationError{}

// Validate checks the field values on ComputedUserset with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComputedUserset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputedUserset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComputedUsersetMultiError, or nil if none found.
func (m *ComputedUserset) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputedUserset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetRelation

	if len(errors) > 0 {
		return ComputedUsersetMultiError(errors)
	}

	return nil
}

// ComputedUsersetMultiError is an error wrapping multiple validation errors
// returned by ComputedUserset.ValidateAll() if the designated constraints
// aren't met.
type ComputedUsersetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputedUsersetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputedUsersetMultiError) AllErrors() []error { return m }

// ComputedUsersetValidationError is the validation error returned by
// ComputedUserset.Validate if the designated constraints aren't met.
type ComputedUsersetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputedUsersetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputedUsersetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputedUsersetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputedUsersetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputedUsersetValidationError) ErrorName() string { return "ComputedUsersetValidationError" }

// Error satisfies the builtin error interface
func (e ComputedUsersetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputedUserset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputedUsersetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputedUsersetValidationError{}

// Validate checks the field values on TupleToUserset with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TupleToUserset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TupleToUserset with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TupleToUsersetMultiError,
// or nil if none found.
func (m *TupleToUserset) ValidateAll() error {
	return m.validate(true)
}

func (m *TupleToUserset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TuplesetRelation

	// no validation rules for ComputedUsersetRelation

	if len(errors) > 0 {
		return TupleToUsersetMultiError(errors)
	}

	return nil
}

// TupleToUsersetMultiError is an error wrapping multiple validation errors
// returned by TupleToUserset.ValidateAll() if the designated constraints
// aren't met.
type TupleToUsersetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TupleToUsersetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TupleToUsersetMultiError) AllErrors() []error { return m }

// TupleToUsersetValidationError is the validation error returned by
// TupleToUserset.Validate if the designated constraints aren't met.
type TupleToUsersetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleToUsersetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleToUsersetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleToUsersetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleToUsersetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleToUsersetValidationError) ErrorName() string { return "TupleToUsersetValidationError" }

// Error satisfies the builtin error interface
func (e TupleToUsersetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleToUserset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleToUsersetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleToUsersetValidationError{}
