// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zanzi/relationship.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/gogoproto/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RelationshipType enumerates the different possible relation types
type RelationshipType int32

const (
	// Represents a relation from an ACTORSET to an OBJECT node.
	// used to express some relation between the source object and target object.
	RelationshipType_ATTRIBUTE RelationshipType = 0
	// Represents a relation grant between an ACTORSET and an ACTOR node
	// Effectively sets a relation between source object and dest actor
	RelationshipType_GRANT RelationshipType = 1
	// Represents a delegated relation between two ACTORSET nodes.
	// Delegation is used to build indirect relations between users
	RelationshipType_DELEGATE RelationshipType = 2
)

var RelationshipType_name = map[int32]string{
	0: "ATTRIBUTE",
	1: "GRANT",
	2: "DELEGATE",
}

var RelationshipType_value = map[string]int32{
	"ATTRIBUTE": 0,
	"GRANT":     1,
	"DELEGATE":  2,
}

func (x RelationshipType) String() string {
	return proto.EnumName(RelationshipType_name, int32(x))
}

func (RelationshipType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d851b725691785f0, []int{0}
}

// Identifies a system entity
type Entity struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_d851b725691785f0, []int{0}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Relationship is a container type for any relation.
// Embeds client application data.
type Relationship struct {
	PolicyId string           `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Type     RelationshipType `protobuf:"varint,2,opt,name=type,proto3,enum=zanzi.RelationshipType" json:"type,omitempty"`
	Object   *Entity          `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Relation string           `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	Actor    *Entity          `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	// may be empty for different rel types
	ActorRelation string            `protobuf:"bytes,6,opt,name=actor_relation,json=actorRelation,proto3" json:"actor_relation,omitempty"`
	CreatedAt     *types.Timestamp  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Relationship) Reset()         { *m = Relationship{} }
func (m *Relationship) String() string { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()    {}
func (*Relationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_d851b725691785f0, []int{1}
}
func (m *Relationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relationship.Merge(m, src)
}
func (m *Relationship) XXX_Size() int {
	return m.Size()
}
func (m *Relationship) XXX_DiscardUnknown() {
	xxx_messageInfo_Relationship.DiscardUnknown(m)
}

var xxx_messageInfo_Relationship proto.InternalMessageInfo

func (m *Relationship) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *Relationship) GetType() RelationshipType {
	if m != nil {
		return m.Type
	}
	return RelationshipType_ATTRIBUTE
}

func (m *Relationship) GetObject() *Entity {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Relationship) GetRelation() string {
	if m != nil {
		return m.Relation
	}
	return ""
}

func (m *Relationship) GetActor() *Entity {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *Relationship) GetActorRelation() string {
	if m != nil {
		return m.ActorRelation
	}
	return ""
}

func (m *Relationship) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Relationship) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("zanzi.RelationshipType", RelationshipType_name, RelationshipType_value)
	proto.RegisterType((*Entity)(nil), "zanzi.Entity")
	proto.RegisterType((*Relationship)(nil), "zanzi.Relationship")
	proto.RegisterMapType((map[string]string)(nil), "zanzi.Relationship.MetadataEntry")
}

func init() { proto.RegisterFile("zanzi/relationship.proto", fileDescriptor_d851b725691785f0) }

var fileDescriptor_d851b725691785f0 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcf, 0x6a, 0x13, 0x41,
	0x18, 0xcf, 0x6c, 0xba, 0x69, 0xf6, 0x6b, 0x13, 0x96, 0x0f, 0xc1, 0x21, 0xca, 0x9a, 0x56, 0x0a,
	0x41, 0x61, 0x02, 0x11, 0x44, 0x2b, 0x1e, 0x52, 0x5c, 0x4a, 0x41, 0x3d, 0x0c, 0xeb, 0xc5, 0x4b,
	0x98, 0xec, 0x8e, 0x75, 0x34, 0xd9, 0x59, 0x76, 0xa7, 0xc2, 0xf6, 0x29, 0x7c, 0x02, 0x9f, 0xc7,
	0x63, 0x8f, 0x1e, 0x25, 0x79, 0x11, 0xe9, 0xec, 0x6c, 0xad, 0xd2, 0xdb, 0xcc, 0xef, 0xdf, 0x7c,
	0xdf, 0x6f, 0x80, 0x5e, 0x8a, 0xfc, 0x52, 0x4d, 0x4b, 0xb9, 0x12, 0x46, 0xe9, 0xbc, 0xfa, 0xac,
	0x0a, 0x56, 0x94, 0xda, 0x68, 0xf4, 0x2d, 0x33, 0x7a, 0x74, 0xae, 0xf5, 0xf9, 0x4a, 0x4e, 0x2d,
	0xb8, 0xbc, 0xf8, 0x34, 0x35, 0x6a, 0x2d, 0x2b, 0x23, 0xd6, 0x4e, 0x77, 0xf8, 0x1c, 0x7a, 0x71,
	0x6e, 0x94, 0xa9, 0xf1, 0x21, 0x04, 0xb9, 0x58, 0xcb, 0xaa, 0x10, 0xa9, 0xa4, 0x64, 0x4c, 0x26,
	0x01, 0xff, 0x0b, 0xe0, 0x10, 0x3c, 0x95, 0x51, 0xcf, 0xc2, 0x9e, 0xca, 0x0e, 0x7f, 0x74, 0x61,
	0x9f, 0xdf, 0x7a, 0x16, 0x1f, 0x40, 0x50, 0xe8, 0x95, 0x4a, 0xeb, 0x85, 0xca, 0x9c, 0xbd, 0xdf,
	0x00, 0x67, 0x19, 0x3e, 0x85, 0x1d, 0x53, 0x17, 0xd2, 0xfa, 0x87, 0xb3, 0xfb, 0xcc, 0x0e, 0xc7,
	0x6e, 0xfb, 0x93, 0xba, 0x90, 0xdc, 0x8a, 0xf0, 0x08, 0x7a, 0x7a, 0xf9, 0x45, 0xa6, 0x86, 0x76,
	0xc7, 0x64, 0xb2, 0x37, 0x1b, 0x38, 0x79, 0x33, 0x27, 0x77, 0x24, 0x8e, 0xa0, 0xdf, 0xee, 0x4d,
	0x77, 0x9a, 0xf7, 0xda, 0x3b, 0x3e, 0x06, 0x5f, 0xa4, 0x46, 0x97, 0xd4, 0xbf, 0x2b, 0xa1, 0xe1,
	0xf0, 0x08, 0x86, 0xf6, 0xb0, 0xb8, 0x89, 0xe9, 0xd9, 0x98, 0x81, 0x45, 0xdb, 0xe1, 0xf0, 0x25,
	0x40, 0x5a, 0x4a, 0x61, 0x64, 0xb6, 0x10, 0x86, 0xee, 0xda, 0xc0, 0x11, 0x6b, 0x7a, 0x65, 0x6d,
	0xaf, 0x2c, 0x69, 0x7b, 0xe5, 0x81, 0x53, 0xcf, 0x0d, 0xbe, 0x86, 0xfe, 0x5a, 0x1a, 0x91, 0x09,
	0x23, 0x28, 0x8c, 0xbb, 0x93, 0xbd, 0xd9, 0xc1, 0x1d, 0xab, 0xb3, 0x77, 0x4e, 0x13, 0xe7, 0xa6,
	0xac, 0xf9, 0x8d, 0x65, 0xf4, 0x0a, 0x06, 0xff, 0x50, 0x18, 0x42, 0xf7, 0xab, 0xac, 0x5d, 0xbb,
	0xd7, 0x47, 0xbc, 0x07, 0xfe, 0x37, 0xb1, 0xba, 0x90, 0xee, 0x67, 0x9a, 0xcb, 0xb1, 0xf7, 0x82,
	0x3c, 0x39, 0x86, 0xf0, 0xff, 0x7e, 0x71, 0x00, 0xc1, 0x3c, 0x49, 0xf8, 0xd9, 0xc9, 0x87, 0x24,
	0x0e, 0x3b, 0x18, 0x80, 0x7f, 0xca, 0xe7, 0xef, 0x93, 0x90, 0xe0, 0x3e, 0xf4, 0xdf, 0xc4, 0x6f,
	0xe3, 0xd3, 0x79, 0x12, 0x87, 0xde, 0xc9, 0xc1, 0xcf, 0x4d, 0x44, 0xae, 0x36, 0x11, 0xf9, 0xbd,
	0x89, 0xc8, 0xf7, 0x6d, 0xd4, 0xb9, 0xda, 0x46, 0x9d, 0x5f, 0xdb, 0xa8, 0xf3, 0x71, 0x97, 0x4d,
	0xaf, 0xff, 0xa8, 0x5a, 0xf6, 0xec, 0xe6, 0xcf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x39, 0x3c,
	0x02, 0x3b, 0x82, 0x02, 0x00, 0x00,
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelationship(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRelationship(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Relationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRelationship(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRelationship(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRelationship(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationship(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ActorRelation) > 0 {
		i -= len(m.ActorRelation)
		copy(dAtA[i:], m.ActorRelation)
		i = encodeVarintRelationship(dAtA, i, uint64(len(m.ActorRelation)))
		i--
		dAtA[i] = 0x32
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationship(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Relation) > 0 {
		i -= len(m.Relation)
		copy(dAtA[i:], m.Relation)
		i = encodeVarintRelationship(dAtA, i, uint64(len(m.Relation)))
		i--
		dAtA[i] = 0x22
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationship(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintRelationship(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintRelationship(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelationship(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelationship(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRelationship(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelationship(uint64(l))
	}
	return n
}

func (m *Relationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovRelationship(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRelationship(uint64(m.Type))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovRelationship(uint64(l))
	}
	l = len(m.Relation)
	if l > 0 {
		n += 1 + l + sovRelationship(uint64(l))
	}
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovRelationship(uint64(l))
	}
	l = len(m.ActorRelation)
	if l > 0 {
		n += 1 + l + sovRelationship(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovRelationship(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRelationship(uint64(len(k))) + 1 + len(v) + sovRelationship(uint64(len(v)))
			n += mapEntrySize + 1 + sovRelationship(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRelationship(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelationship(x uint64) (n int) {
	return sovRelationship(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationship
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationship(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationship
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationship
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RelationshipType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Entity{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Entity{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorRelation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorRelation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationship
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationship
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationship
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRelationship
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRelationship
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationship
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRelationship
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRelationship
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRelationship(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRelationship
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationship(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationship
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelationship(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelationship
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationship
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelationship
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelationship
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelationship
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelationship        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelationship          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelationship = fmt.Errorf("proto: unexpected end of group")
)
