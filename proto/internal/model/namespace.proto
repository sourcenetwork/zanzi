/* File contains types representing Namespaces.
 *
 * Namespaces declare client application specific contexts and relations.
 * A Namespace definition cointains a name and a set of relations.
 * Namespaces are identified by their name, therefore names should be unique.  */

syntax = "proto3";

package model;
option go_package = "github.com/sourcenetwork/source-zanzibar/internal/model";
/*

option go_package = "github.com/sourcenetwork/source-zanzibar/model";


message Namespace {
    string name = 1;
    repeated Relation relations = 2;
}

message Relation {
    string name = 1;
    UsersetRewrite rewrite = 2;
}

message UsersetRewrite {
    RewriteNode expressionTree = 1;
}

message RewriteNode {
    oneof node {
        OpNode opnode = 1;
        Leaf leaf = 2;
    }
}

message OpNode {
    RewriteNode left = 1;
    RewriteNode right = 2;
    Operation op = 3;
}

message Leaf {
    Rule rule = 1;
}

enum Operation {
    UNION = 0;
    INTERSECTION = 1;
    DIFFERENCE = 2;
}


message Rule {
    oneof rule {
        This this = 1;
        ComputedUserset computedUserset = 2;
        TupleToUserset tupleToUserset = 3;
    }
}

// This specifies a Rule which returns all users for a given (object, relation) pair.
// The rule performs userset chasing.
message This {}

// ComputerUserset specifies a rule to dynamically create a userset for a given object.
// The created Userset may then be used to perform additional lookups.
// It's functionally similar to "This", except it does checks using a volatile relation tuple.
message ComputedUserset {
    string relation = 1;
}

// The TupleToUserset is a multistep rule that:
// - Fetches a Tupleset for the given object using TuplesetRelation
// - For each fetched tuple compute an userset using UsersetRelation
// 
// For Check and Expand calls, the computed usersets are used to perform further lookups.
//
// A practical example:
// Let TuplesetRelation = "parent"
// Let UsersetRelation = "owner"
// Let the input object be "doc:readme"
// TupleToUserset would then:
// - Lookup all tuples matching (obj="doc:readme", relation="parent").
//   assume the matching tuples are [(obj="doc:readme", relation="parent", user=(id="dir:root", relation="..."))]
// - For each found tuple, it would compute the userset (obj=${result_tuple_userset_obj}, relation=UsersetRelation);
//   eg. it would compute the userset (obj="dir:root", relation="owner")
message TupleToUserset {
    string tuplesetRelation = 1;
    string computedUsersetRelation = 2;
}
*/
