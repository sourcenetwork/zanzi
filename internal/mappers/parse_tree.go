package mappers

import (
	"github.com/sourcenetwork/source-zanzibar/internal/domain/policy"
	parser "github.com/sourcenetwork/source-zanzibar/internal/permission_parser"
)

// ToRewriteTree maps a parse tree generated by permission_parser package
// into a policy Rewrite Tree
func ToRewriteTree(tree parser.Term) *policy.Tree {
    switch n := tree.(type) {
    case *parser.CUNode:
        return mapCU(n)
    case *parser.TTUNode:
        return mapTTU(n)
    case *parser.ThisNode:
        return mapThis(n)
    case *parser.Expression:
        return mapExpression(n)
    default:
        panic("invalid term type")
    }
}

func mapTTU(node *parser.TTUNode) *policy.Tree {
    return policy.TTU(node.Source, "", node.Target) // TODO
}

func mapCU(node *parser.CUNode) *policy.Tree {
    return policy.CU(node.Name)
}

func mapThis(node *parser.ThisNode) *policy.Tree {
    return policy.ThisTree()
}


func mapExpression(node *parser.Expression) *policy.Tree {
    return policy.BuildOpNode(mapOp(node.Op), ToRewriteTree(node.Left), ToRewriteTree(node.Right))
}

func mapOp(op parser.SetOperation) policy.Operation{
    switch op {
    case parser.Union:
        return policy.Operation_UNION
    case parser.Intersection:
        return policy.Operation_INTERSECTION
    case parser.Difference:
        return policy.Operation_DIFFERENCE
    default:
        panic("invalid SetOperation")
    }
}
